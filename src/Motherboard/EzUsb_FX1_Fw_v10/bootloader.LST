C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE BOOTLOADER
OBJECT MODULE PLACED IN bootloader.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE bootloader.c OPTIMIZE(9,SIZE) INCDIR(..\..\Common_Ez_Z8) DEFINE(EZ_COMPIL) 
                    -CODE LISTINCLUDE SYMBOLS PREPRINT

line level    source

   1          // ==========================================================================
   2          // Copyright (C) MAWZER - Jerash Labs 2006
   3          // ==========================================================================
   4          
   5          //#pragma NOIV  // Do not generate interrupt vectors
   6           
   7          #include "fx2.h"
   1      =1  //-----------------------------------------------------------------------------
   2      =1  //   File:      FX2.h
   3      =1  //   Contents:  EZ-USB FX2/FX2LP/FX1 constants, macros, datatypes, globals, and library
   4      =1  //              function prototypes.
   5      =1  //
   6      =1  // $Archive: /USB/Target/Inc/Fx2.h $
   7      =1  // $Date: 3/23/05 2:30p $
   8      =1  // $Revision: 16 $
   9      =1  //
  10      =1  //   Copyright (c) 2005 Cypress Semiconductor, All rights reserved
  11      =1  //-----------------------------------------------------------------------------
  12      =1  #ifndef FX2_H     //Header sentry
  13      =1  #define FX2_H
  14      =1  
  15      =1  #define INTERNAL_DSCR_ADDR 0x0080   // Relocate Descriptors to 0x80
  16      =1  #define bmSTRETCH 0x07
  17      =1  #define FW_STRETCH_VALUE 0x0      // Set stretch to 0 in frameworks
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  // Constants
  21      =1  //-----------------------------------------------------------------------------
  22      =1  #define   TRUE    1
  23      =1  #define FALSE   0
  24      =1  
  25      =1  #define bmBIT0   0x01
  26      =1  #define bmBIT1   0x02
  27      =1  #define bmBIT2   0x04
  28      =1  #define bmBIT3   0x08
  29      =1  #define bmBIT4   0x10
  30      =1  #define bmBIT5   0x20
  31      =1  #define bmBIT6   0x40
  32      =1  #define bmBIT7   0x80
  33      =1  
  34      =1  #define DEVICE_DSCR      0x01      // Descriptor type: Device
  35      =1  #define CONFIG_DSCR      0x02      // Descriptor type: Configuration
  36      =1  #define STRING_DSCR      0x03      // Descriptor type: String
  37      =1  #define INTRFC_DSCR      0x04      // Descriptor type: Interface
  38      =1  #define ENDPNT_DSCR      0x05      // Descriptor type: End Point
  39      =1  #define DEVQUAL_DSCR     0x06      // Descriptor type: Device Qualifier
  40      =1  #define OTHERSPEED_DSCR  0x07      // Descriptor type: Other Speed Configuration
  41      =1  
  42      =1  #define bmBUSPWR  bmBIT7         // Config. attribute: Bus powered
  43      =1  #define bmSELFPWR bmBIT6         // Config. attribute: Self powered
  44      =1  #define bmRWU     bmBIT5         // Config. attribute: Remote Wakeup
  45      =1  
  46      =1  #define bmEPOUT   bmBIT7
  47      =1  #define bmEPIN    0x00
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 2   

  48      =1  
  49      =1  #define EP_CONTROL   0x00        // End Point type: Control
  50      =1  #define EP_ISO       0x01        // End Point type: Isochronous
  51      =1  #define EP_BULK      0x02        // End Point type: Bulk
  52      =1  #define EP_INT       0x03        // End Point type: Interrupt
  53      =1  
  54      =1  #define SUD_SIZE            8      // Setup data packet size
  55      =1  
  56      =1  //////////////////////////////////////////////////////////////////////////////
  57      =1  //Added for HID
  58      =1  
  59      =1  #define SETUP_MASK                              0x60    //Used to mask off request type
  60      =1  #define SETUP_STANDARD_REQUEST  0               //Standard Request
  61      =1  #define SETUP_CLASS_REQUEST             0x20    //Class Request
  62      =1  #define SETUP_VENDOR_REQUEST    0x40    //Vendor Request
  63      =1  #define SETUP_RESERVED_REQUEST  0x60    //Reserved or illegal request
  64      =1  
  65      =1  //////////////////////////////////////////////////////////////////////////////
  66      =1  
  67      =1  
  68      =1  #define SC_GET_STATUS         0x00   // Setup command: Get Status
  69      =1  #define SC_CLEAR_FEATURE      0x01   // Setup command: Clear Feature
  70      =1  #define SC_RESERVED            0x02   // Setup command: Reserved
  71      =1  #define SC_SET_FEATURE         0x03   // Setup command: Set Feature
  72      =1  #define SC_SET_ADDRESS         0x05   // Setup command: Set Address
  73      =1  #define SC_GET_DESCRIPTOR      0x06   // Setup command: Get Descriptor
  74      =1  #define SC_SET_DESCRIPTOR      0x07   // Setup command: Set Descriptor
  75      =1  #define SC_GET_CONFIGURATION   0x08   // Setup command: Get Configuration
  76      =1  #define SC_SET_CONFIGURATION   0x09   // Setup command: Set Configuration
  77      =1  #define SC_GET_INTERFACE      0x0a   // Setup command: Get Interface
  78      =1  #define SC_SET_INTERFACE      0x0b   // Setup command: Set Interface
  79      =1  #define SC_SYNC_FRAME         0x0c   // Setup command: Sync Frame
  80      =1  #define SC_ANCHOR_LOAD         0xa0   // Setup command: Anchor load
  81      =1     
  82      =1  #define GD_DEVICE          0x01  // Get descriptor: Device
  83      =1  #define GD_CONFIGURATION   0x02  // Get descriptor: Configuration
  84      =1  #define GD_STRING          0x03  // Get descriptor: String
  85      =1  #define GD_INTERFACE       0x04  // Get descriptor: Interface
  86      =1  #define GD_ENDPOINT        0x05  // Get descriptor: Endpoint
  87      =1  #define GD_DEVICE_QUALIFIER 0x06  // Get descriptor: Device Qualifier
  88      =1  #define GD_OTHER_SPEED_CONFIGURATION 0x07  // Get descriptor: Other Configuration
  89      =1  #define GD_INTERFACE_POWER 0x08  // Get descriptor: Interface Power
  90      =1  #define GD_HID              0x21        // Get descriptor: HID
  91      =1  #define GD_REPORT                0x22   // Get descriptor: Report
  92      =1  
  93      =1  #define GS_DEVICE          0x80  // Get Status: Device
  94      =1  #define GS_INTERFACE       0x81  // Get Status: Interface
  95      =1  #define GS_ENDPOINT        0x82  // Get Status: End Point
  96      =1  
  97      =1  #define FT_DEVICE          0x00  // Feature: Device
  98      =1  #define FT_ENDPOINT        0x02  // Feature: End Point
  99      =1  
 100      =1  #define I2C_IDLE              0     // I2C Status: Idle mode
 101      =1  #define I2C_SENDING           1     // I2C Status: I2C is sending data
 102      =1  #define I2C_RECEIVING         2     // I2C Status: I2C is receiving data
 103      =1  #define I2C_PRIME             3     // I2C Status: I2C is receiving the first byte of a string
 104      =1  #define I2C_STOP              5     // I2C Status: I2C waiting for stop completion
 105      =1  #define I2C_BERROR            6     // I2C Status: I2C error; Bit Error
 106      =1  #define I2C_NACK              7     // I2C Status: I2C error; No Acknowledge
 107      =1  #define I2C_OK                8     // I2C positive return code
 108      =1  #define I2C_WAITSTOP          9     // I2C Status: Wait for STOP complete
 109      =1  
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 3   

 110      =1  /*-----------------------------------------------------------------------------
 111      =1     Macros
 112      =1  -----------------------------------------------------------------------------*/
 113      =1  
 114      =1  #define MSB(word)      (BYTE)(((WORD)(word) >> 8) & 0xff)
 115      =1  #define LSB(word)      (BYTE)((WORD)(word) & 0xff)
 116      =1  
 117      =1  #define SWAP_ENDIAN(word)   ((BYTE*)&word)[0] ^= ((BYTE*)&word)[1];\
 118      =1                       ((BYTE*)&word)[1] ^= ((BYTE*)&word)[0];\
 119      =1                       ((BYTE*)&word)[0] ^= ((BYTE*)&word)[1]
 120      =1  
 121      =1  #define EZUSB_IRQ_ENABLE()   EUSB = 1
 122      =1  #define EZUSB_IRQ_DISABLE()   EUSB = 0
 123      =1  #define EZUSB_IRQ_CLEAR()   EXIF &= ~0x10      // IE2_
 124      =1  
 125      =1  #define EZUSB_STALL_EP0()            EP0CS |= bmEPSTALL
 126      =1  
 127      =1  // WRITEDELAY() has been replaced by SYNCDELAY; macro in fx2sdly.h
 128      =1  // ...it is here for backwards compatibility...
 129      =1  
 130      =1  // the WRITEDELAY macro compiles to the time equivalent of 3 NOPs.
 131      =1  // It is used in the frameworks to allow for write recovery time
 132      =1  // requirements of certain registers.  This is only necessary for
 133      =1  // EZ-USB FX parts.  See the EZ-USB FX TRM for
 134      =1  // more information on write recovery time issues.
 135      =1  #define WRITEDELAY() {char writedelaydummy = 0;}
 136      =1  // if this firmware will never run on an EZ-USB FX part replace
 137      =1  // with:
 138      =1  // #define WRITEDELAY()
 139      =1  
 140      =1  // macro to reset and endpoint data toggle
 141      =1  #define EZUSB_RESET_DATA_TOGGLE(ep)     TOGCTL = (((ep & 0x80) >> 3) + (ep & 0x0F));\
 142      =1                                          TOGCTL |= bmRESETTOGGLE
 143      =1  
 144      =1  
 145      =1  #define EZUSB_ENABLE_RSMIRQ()      (EICON |= 0x20)      // Enable Resume Interrupt (EPFI_)
 146      =1  #define EZUSB_DISABLE_RSMIRQ()      (EICON &= ~0x20)   // Disable Resume Interrupt (EPFI_)
 147      =1  #define EZUSB_CLEAR_RSMIRQ()      (EICON &= ~0x10)   // Clear Resume Interrupt Flag (PFI_)
 148      =1  
 149      =1  #define EZUSB_GETI2CSTATUS()      (I2CPckt.status)
 150      =1  #define EZUSB_CLEARI2CSTATUS()      if((I2CPckt.status == I2C_BERROR) || (I2CPckt.status == I2C_NACK))\
 151      =1                                I2CPckt.status = I2C_IDLE;
 152      =1  
 153      =1  #define EZUSB_ENABLEBP()         (BREAKPT |= bmBPEN)
 154      =1  #define EZUSB_DISABLEBP()         (BREAKPT &= ~bmBPEN)
 155      =1  #define EZUSB_CLEARBP()            (BREAKPT |= bmBREAK)
 156      =1  #define EZUSB_BP(addr)            BPADDRH = (BYTE)(((WORD)addr >> 8) & 0xff);\      
 157      =1                                    BPADDRL = (BYTE)addr
 158      =1  
 159      =1  #define EZUSB_EXTWAKEUP()      (((WAKEUPCS & bmWU2) && (WAKEUPCS & bmWU2EN)) ||\
 160      =1                                  ((WAKEUPCS & bmWU) &&  (WAKEUPCS & bmWUEN)))
 161      =1  
 162      =1  #define EZUSB_HIGHSPEED()      (USBCS & bmHSM)
 163      =1  
 164      =1  //-----------------------------------------------------------------------------
 165      =1  // Datatypes
 166      =1  //-----------------------------------------------------------------------------
 167      =1  typedef unsigned char   BYTE;
 168      =1  typedef unsigned short   WORD;
 169      =1  typedef unsigned long   DWORD;
 170      =1  typedef bit            BOOL;
 171      =1  
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 4   

 172      =1  #define  INT0_VECT   0
 173      =1  #define  TMR0_VECT   1
 174      =1  #define  INT1_VECT   2
 175      =1  #define  TMR1_VECT   3
 176      =1  #define  COM0_VECT   4
 177      =1  #define  TMR2_VECT   5
 178      =1  #define  WKUP_VECT   6
 179      =1  #define  COM1_VECT   7
 180      =1  #define  USB_VECT    8
 181      =1  #define  I2C_VECT    9
 182      =1  #define  INT4_VECT   10
 183      =1  #define  INT5_VECT   11
 184      =1  #define  INT6_VECT   12
 185      =1  
 186      =1  
 187      =1  typedef struct
 188      =1  {
 189      =1     BYTE   length;
 190      =1     BYTE   type;
 191      =1  }DSCR;
 192      =1  
 193      =1  typedef struct            // Device Descriptor
 194      =1  {
 195      =1     BYTE   length;         // Descriptor length ( = sizeof(DEVICEDSCR) )
 196      =1     BYTE   type;         // Decriptor type (Device = 1)
 197      =1     BYTE   spec_ver_minor;   // Specification Version (BCD) minor
 198      =1     BYTE   spec_ver_major;   // Specification Version (BCD) major
 199      =1     BYTE   dev_class;      // Device class
 200      =1     BYTE   sub_class;      // Device sub-class
 201      =1     BYTE   protocol;      // Device sub-sub-class
 202      =1     BYTE   max_packet;      // Maximum packet size
 203      =1     WORD   vendor_id;      // Vendor ID
 204      =1     WORD   product_id;      // Product ID
 205      =1     WORD   version_id;      // Product version ID
 206      =1     BYTE   mfg_str;      // Manufacturer string index
 207      =1     BYTE   prod_str;      // Product string index
 208      =1     BYTE   serialnum_str;   // Serial number string index
 209      =1     BYTE   configs;      // Number of configurations
 210      =1  }DEVICEDSCR;
 211      =1  
 212      =1  typedef struct            // Device Qualifier Descriptor
 213      =1  {
 214      =1     BYTE   length;         // Descriptor length ( = sizeof(DEVICEQUALDSCR) )
 215      =1     BYTE   type;         // Decriptor type (Device Qualifier = 6)
 216      =1     BYTE   spec_ver_minor;   // Specification Version (BCD) minor
 217      =1     BYTE   spec_ver_major;   // Specification Version (BCD) major
 218      =1     BYTE   dev_class;      // Device class
 219      =1     BYTE   sub_class;      // Device sub-class
 220      =1     BYTE   protocol;      // Device sub-sub-class
 221      =1     BYTE   max_packet;      // Maximum packet size
 222      =1     BYTE   configs;      // Number of configurations
 223      =1     BYTE  reserved0;
 224      =1  }DEVICEQUALDSCR;
 225      =1  
 226      =1  typedef struct
 227      =1  {
 228      =1     BYTE   length;         // Configuration length ( = sizeof(CONFIGDSCR) )
 229      =1     BYTE   type;         // Descriptor type (Configuration = 2)
 230      =1     WORD   config_len;      // Configuration + End Points length
 231      =1     BYTE   interfaces;      // Number of interfaces
 232      =1     BYTE   index;         // Configuration number
 233      =1     BYTE   config_str;      // Configuration string
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 5   

 234      =1     BYTE   attrib;         // Attributes (b7 - buspwr, b6 - selfpwr, b5 - rwu
 235      =1     BYTE   power;         // Power requirement (div 2 ma)
 236      =1  }CONFIGDSCR;
 237      =1  
 238      =1  typedef struct
 239      =1  {
 240      =1     BYTE   length;         // Interface descriptor length ( - sizeof(INTRFCDSCR) )
 241      =1     BYTE   type;         // Descriptor type (Interface = 4)
 242      =1     BYTE   index;         // Zero-based index of this interface
 243      =1     BYTE   alt_setting;   // Alternate setting
 244      =1     BYTE   ep_cnt;         // Number of end points 
 245      =1     BYTE   class;         // Interface class
 246      =1     BYTE   sub_class;      // Interface sub class
 247      =1     BYTE   protocol;      // Interface sub sub class
 248      =1     BYTE   interface_str;   // Interface descriptor string index
 249      =1  }INTRFCDSCR;
 250      =1  
 251      =1  typedef struct
 252      =1  {
 253      =1     BYTE   length;         // End point descriptor length ( = sizeof(ENDPNTDSCR) )
 254      =1     BYTE   type;         // Descriptor type (End point = 5)
 255      =1     BYTE   addr;         // End point address
 256      =1     BYTE   ep_type;      // End point type
 257      =1     BYTE   mp_L;         // Maximum packet size
 258      =1     BYTE   mp_H;
 259      =1     BYTE   interval;      // Interrupt polling interval
 260      =1  }ENDPNTDSCR;
 261      =1  
 262      =1  typedef struct
 263      =1  {
 264      =1     BYTE   length;         // String descriptor length
 265      =1     BYTE   type;         // Descriptor type
 266      =1  }STRINGDSCR;
 267      =1  
 268      =1  typedef struct
 269      =1  {
 270      =1     BYTE   cntrl;         // End point control register
 271      =1     BYTE   bytes;         // End point buffer byte count
 272      =1  }EPIOC;
 273      =1  
 274      =1  typedef struct 
 275      =1  {
 276      =1     BYTE   length;
 277      =1     BYTE   *dat;
 278      =1     BYTE   count;
 279      =1     BYTE   status;
 280      =1  }I2CPCKT;
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  // Globals
 284      =1  //-----------------------------------------------------------------------------
 285      =1  extern code BYTE   USB_AutoVector;
 286      =1  
 287      =1  extern WORD   pDeviceDscr;
 288      =1  extern WORD   pDeviceQualDscr;
 289      =1  extern WORD       pHighSpeedConfigDscr;
 290      =1  extern WORD       pFullSpeedConfigDscr; 
 291      =1  extern WORD   pConfigDscr;
 292      =1  extern WORD   pOtherConfigDscr;
 293      =1  extern WORD   pStringDscr;
 294      =1  
 295      =1  extern code DEVICEDSCR        DeviceDscr;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 6   

 296      =1  extern code DEVICEQUALDSCR    DeviceQualDscr;
 297      =1  extern code CONFIGDSCR        HighSpeedConfigDscr;
 298      =1  extern code CONFIGDSCR        FullSpeedConfigDscr;
 299      =1  extern code STRINGDSCR        StringDscr;
 300      =1  extern code DSCR              UserDscr;
 301      =1  
 302      =1  extern I2CPCKT   I2CPckt;
 303      =1  
 304      =1  //-----------------------------------------------------------------------------
 305      =1  // Function Prototypes
 306      =1  //-----------------------------------------------------------------------------
 307      =1  
 308      =1  extern void EZUSB_Renum(void);
 309      =1  extern void EZUSB_Discon(BOOL renum);
 310      =1  
 311      =1  extern void EZUSB_Susp(void);
 312      =1  extern void EZUSB_Resume(void);
 313      =1  
 314      =1  extern void EZUSB_Delay1ms(void);
 315      =1  extern void EZUSB_Delay(WORD ms);
 316      =1  
 317      =1  extern CONFIGDSCR xdata*   EZUSB_GetConfigDscr(BYTE ConfigIdx);
 318      =1  extern INTRFCDSCR xdata*   EZUSB_GetIntrfcDscr(BYTE ConfigIdx, BYTE IntrfcIdx, BYTE AltSetting);
 319      =1  extern STRINGDSCR xdata*   EZUSB_GetStringDscr(BYTE StrIdx);
 320      =1  extern DSCR xdata*      EZUSB_GetDscr(BYTE index, DSCR* dscr, BYTE type);
 321      =1  
 322      =1  extern void EZUSB_InitI2C(void);
 323      =1  extern BOOL EZUSB_WriteI2C_(BYTE addr, BYTE length, BYTE xdata *dat);
 324      =1  extern BOOL EZUSB_ReadI2C_(BYTE addr, BYTE length, BYTE xdata *dat);
 325      =1  extern BOOL EZUSB_WriteI2C(BYTE addr, BYTE length, BYTE xdata *dat);
 326      =1  extern BOOL EZUSB_ReadI2C(BYTE addr, BYTE length, BYTE xdata *dat);
 327      =1  extern void EZUSB_WaitForEEPROMWrite(BYTE addr);
 328      =1  
 329      =1  extern void modify_endpoint_stall(BYTE epid, BYTE stall);
 330      =1  
 331      =1  #endif   // FX2_H
   8          #include "fx2regs.h"
   1      =1  //-----------------------------------------------------------------------------
   2      =1  //   File:      FX2regs.h
   3      =1  //   Contents:   EZ-USB FX2/FX2LP/FX1 register declarations and bit mask definitions.
   4      =1  //
   5      =1  // $Archive: /USB/Target/Inc/fx2regs.h $
   6      =1  // $Date: 4/13/05 4:29p $
   7      =1  // $Revision: 42 $
   8      =1  //
   9      =1  //
  10      =1  //   Copyright (c) 2005 Cypress Semiconductor, All rights reserved
  11      =1  //-----------------------------------------------------------------------------
  12      =1  
  13      =1  #ifndef FX2REGS_H   /* Header Sentry */
  14      =1  #define FX2REGS_H
  15      =1  
  16      =1  //-----------------------------------------------------------------------------
  17      =1  // FX2/FX2LP/FX1 Related Register Assignments
  18      =1  //-----------------------------------------------------------------------------
  19      =1  
  20      =1  // The Ez-USB FX2/FX2LP/FX1 registers are defined here. We use fx2regs.h for register 
  21      =1  // address allocation by using "#define ALLOCATE_EXTERN". 
  22      =1  // When using "#define ALLOCATE_EXTERN", you get (for instance): 
  23      =1  // xdata volatile BYTE OUT7BUF[64]   _at_   0x7B40;
  24      =1  // Such lines are created from FX2.h by using the preprocessor. 
  25      =1  // Incidently, these lines will not generate any space in the resulting hex 
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 7   

  26      =1  // file; they just bind the symbols to the addresses for compilation. 
  27      =1  // You just need to put "#define ALLOCATE_EXTERN" in your main program file; 
  28      =1  // i.e. fw.c or a stand-alone C source file. 
  29      =1  // Without "#define ALLOCATE_EXTERN", you just get the external reference: 
  30      =1  // extern xdata volatile BYTE OUT7BUF[64]   ;//   0x7B40;
  31      =1  // This uses the concatenation operator "##" to insert a comment "//" 
  32      =1  // to cut off the end of the line, "_at_   0x7B40;", which is not wanted.
  33      =1  
  34      =1  #ifdef ALLOCATE_EXTERN
           =1 #define EXTERN
           =1 #define _AT_ _at_
           =1 #else
  38      =1  #define EXTERN extern
  39      =1  #define _AT_ ;/ ## /
  40      =1  #endif
  41      =1  
  42      =1  EXTERN xdata volatile BYTE GPIF_WAVE_DATA    _AT_ 0xE400;
  43      =1  EXTERN xdata volatile BYTE RES_WAVEDATA_END  _AT_ 0xE480;
  44      =1  
  45      =1  // General Configuration
  46      =1  
  47      =1  EXTERN xdata volatile BYTE CPUCS             _AT_ 0xE600;  // Control & Status
  48      =1  EXTERN xdata volatile BYTE IFCONFIG          _AT_ 0xE601;  // Interface Configuration
  49      =1  EXTERN xdata volatile BYTE PINFLAGSAB        _AT_ 0xE602;  // FIFO FLAGA and FLAGB Assignments
  50      =1  EXTERN xdata volatile BYTE PINFLAGSCD        _AT_ 0xE603;  // FIFO FLAGC and FLAGD Assignments
  51      =1  EXTERN xdata volatile BYTE FIFORESET         _AT_ 0xE604;  // Restore FIFOS to default state
  52      =1  EXTERN xdata volatile BYTE BREAKPT           _AT_ 0xE605;  // Breakpoint
  53      =1  EXTERN xdata volatile BYTE BPADDRH           _AT_ 0xE606;  // Breakpoint Address H
  54      =1  EXTERN xdata volatile BYTE BPADDRL           _AT_ 0xE607;  // Breakpoint Address L
  55      =1  EXTERN xdata volatile BYTE UART230           _AT_ 0xE608;  // 230 Kbaud clock for T0,T1,T2
  56      =1  EXTERN xdata volatile BYTE FIFOPINPOLAR      _AT_ 0xE609;  // FIFO polarities
  57      =1  EXTERN xdata volatile BYTE REVID             _AT_ 0xE60A;  // Chip Revision
  58      =1  EXTERN xdata volatile BYTE REVCTL            _AT_ 0xE60B;  // Chip Revision Control
  59      =1  
  60      =1  // Endpoint Configuration
  61      =1  
  62      =1  EXTERN xdata volatile BYTE EP1OUTCFG         _AT_ 0xE610;  // Endpoint 1-OUT Configuration
  63      =1  EXTERN xdata volatile BYTE EP1INCFG          _AT_ 0xE611;  // Endpoint 1-IN Configuration
  64      =1  EXTERN xdata volatile BYTE EP2CFG            _AT_ 0xE612;  // Endpoint 2 Configuration
  65      =1  EXTERN xdata volatile BYTE EP4CFG            _AT_ 0xE613;  // Endpoint 4 Configuration
  66      =1  EXTERN xdata volatile BYTE EP6CFG            _AT_ 0xE614;  // Endpoint 6 Configuration
  67      =1  EXTERN xdata volatile BYTE EP8CFG            _AT_ 0xE615;  // Endpoint 8 Configuration
  68      =1  EXTERN xdata volatile BYTE EP2FIFOCFG        _AT_ 0xE618;  // Endpoint 2 FIFO configuration
  69      =1  EXTERN xdata volatile BYTE EP4FIFOCFG        _AT_ 0xE619;  // Endpoint 4 FIFO configuration
  70      =1  EXTERN xdata volatile BYTE EP6FIFOCFG        _AT_ 0xE61A;  // Endpoint 6 FIFO configuration
  71      =1  EXTERN xdata volatile BYTE EP8FIFOCFG        _AT_ 0xE61B;  // Endpoint 8 FIFO configuration
  72      =1  EXTERN xdata volatile BYTE EP2AUTOINLENH     _AT_ 0xE620;  // Endpoint 2 Packet Length H (IN only)
  73      =1  EXTERN xdata volatile BYTE EP2AUTOINLENL     _AT_ 0xE621;  // Endpoint 2 Packet Length L (IN only)
  74      =1  EXTERN xdata volatile BYTE EP4AUTOINLENH     _AT_ 0xE622;  // Endpoint 4 Packet Length H (IN only)
  75      =1  EXTERN xdata volatile BYTE EP4AUTOINLENL     _AT_ 0xE623;  // Endpoint 4 Packet Length L (IN only)
  76      =1  EXTERN xdata volatile BYTE EP6AUTOINLENH     _AT_ 0xE624;  // Endpoint 6 Packet Length H (IN only)
  77      =1  EXTERN xdata volatile BYTE EP6AUTOINLENL     _AT_ 0xE625;  // Endpoint 6 Packet Length L (IN only)
  78      =1  EXTERN xdata volatile BYTE EP8AUTOINLENH     _AT_ 0xE626;  // Endpoint 8 Packet Length H (IN only)
  79      =1  EXTERN xdata volatile BYTE EP8AUTOINLENL     _AT_ 0xE627;  // Endpoint 8 Packet Length L (IN only)
  80      =1  EXTERN xdata volatile BYTE EP2FIFOPFH        _AT_ 0xE630;  // EP2 Programmable Flag trigger H
  81      =1  EXTERN xdata volatile BYTE EP2FIFOPFL        _AT_ 0xE631;  // EP2 Programmable Flag trigger L
  82      =1  EXTERN xdata volatile BYTE EP4FIFOPFH        _AT_ 0xE632;  // EP4 Programmable Flag trigger H
  83      =1  EXTERN xdata volatile BYTE EP4FIFOPFL        _AT_ 0xE633;  // EP4 Programmable Flag trigger L
  84      =1  EXTERN xdata volatile BYTE EP6FIFOPFH        _AT_ 0xE634;  // EP6 Programmable Flag trigger H
  85      =1  EXTERN xdata volatile BYTE EP6FIFOPFL        _AT_ 0xE635;  // EP6 Programmable Flag trigger L
  86      =1  EXTERN xdata volatile BYTE EP8FIFOPFH        _AT_ 0xE636;  // EP8 Programmable Flag trigger H
  87      =1  EXTERN xdata volatile BYTE EP8FIFOPFL        _AT_ 0xE637;  // EP8 Programmable Flag trigger L
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 8   

  88      =1  EXTERN xdata volatile BYTE EP2ISOINPKTS      _AT_ 0xE640;  // EP2 (if ISO) IN Packets per frame (1-3)
  89      =1  EXTERN xdata volatile BYTE EP4ISOINPKTS      _AT_ 0xE641;  // EP4 (if ISO) IN Packets per frame (1-3)
  90      =1  EXTERN xdata volatile BYTE EP6ISOINPKTS      _AT_ 0xE642;  // EP6 (if ISO) IN Packets per frame (1-3)
  91      =1  EXTERN xdata volatile BYTE EP8ISOINPKTS      _AT_ 0xE643;  // EP8 (if ISO) IN Packets per frame (1-3)
  92      =1  EXTERN xdata volatile BYTE INPKTEND          _AT_ 0xE648;  // Force IN Packet End
  93      =1  EXTERN xdata volatile BYTE OUTPKTEND         _AT_ 0xE649;  // Force OUT Packet End
  94      =1  
  95      =1  // Interrupts
  96      =1  
  97      =1  EXTERN xdata volatile BYTE EP2FIFOIE         _AT_ 0xE650;  // Endpoint 2 Flag Interrupt Enable
  98      =1  EXTERN xdata volatile BYTE EP2FIFOIRQ        _AT_ 0xE651;  // Endpoint 2 Flag Interrupt Request
  99      =1  EXTERN xdata volatile BYTE EP4FIFOIE         _AT_ 0xE652;  // Endpoint 4 Flag Interrupt Enable
 100      =1  EXTERN xdata volatile BYTE EP4FIFOIRQ        _AT_ 0xE653;  // Endpoint 4 Flag Interrupt Request
 101      =1  EXTERN xdata volatile BYTE EP6FIFOIE         _AT_ 0xE654;  // Endpoint 6 Flag Interrupt Enable
 102      =1  EXTERN xdata volatile BYTE EP6FIFOIRQ        _AT_ 0xE655;  // Endpoint 6 Flag Interrupt Request
 103      =1  EXTERN xdata volatile BYTE EP8FIFOIE         _AT_ 0xE656;  // Endpoint 8 Flag Interrupt Enable
 104      =1  EXTERN xdata volatile BYTE EP8FIFOIRQ        _AT_ 0xE657;  // Endpoint 8 Flag Interrupt Request
 105      =1  EXTERN xdata volatile BYTE IBNIE             _AT_ 0xE658;  // IN-BULK-NAK Interrupt Enable
 106      =1  EXTERN xdata volatile BYTE IBNIRQ            _AT_ 0xE659;  // IN-BULK-NAK interrupt Request
 107      =1  EXTERN xdata volatile BYTE NAKIE             _AT_ 0xE65A;  // Endpoint Ping NAK interrupt Enable
 108      =1  EXTERN xdata volatile BYTE NAKIRQ            _AT_ 0xE65B;  // Endpoint Ping NAK interrupt Request
 109      =1  EXTERN xdata volatile BYTE USBIE             _AT_ 0xE65C;  // USB Int Enables
 110      =1  EXTERN xdata volatile BYTE USBIRQ            _AT_ 0xE65D;  // USB Interrupt Requests
 111      =1  EXTERN xdata volatile BYTE EPIE              _AT_ 0xE65E;  // Endpoint Interrupt Enables
 112      =1  EXTERN xdata volatile BYTE EPIRQ             _AT_ 0xE65F;  // Endpoint Interrupt Requests
 113      =1  EXTERN xdata volatile BYTE GPIFIE            _AT_ 0xE660;  // GPIF Interrupt Enable
 114      =1  EXTERN xdata volatile BYTE GPIFIRQ           _AT_ 0xE661;  // GPIF Interrupt Request
 115      =1  EXTERN xdata volatile BYTE USBERRIE          _AT_ 0xE662;  // USB Error Interrupt Enables
 116      =1  EXTERN xdata volatile BYTE USBERRIRQ         _AT_ 0xE663;  // USB Error Interrupt Requests
 117      =1  EXTERN xdata volatile BYTE ERRCNTLIM         _AT_ 0xE664;  // USB Error counter and limit
 118      =1  EXTERN xdata volatile BYTE CLRERRCNT         _AT_ 0xE665;  // Clear Error Counter EC[3..0]
 119      =1  EXTERN xdata volatile BYTE INT2IVEC          _AT_ 0xE666;  // Interupt 2 (USB) Autovector
 120      =1  EXTERN xdata volatile BYTE INT4IVEC          _AT_ 0xE667;  // Interupt 4 (FIFOS & GPIF) Autovector
 121      =1  EXTERN xdata volatile BYTE INTSETUP          _AT_ 0xE668;  // Interrupt 2&4 Setup
 122      =1  
 123      =1  // Input/Output
 124      =1  
 125      =1  EXTERN xdata volatile BYTE PORTACFG          _AT_ 0xE670;  // I/O PORTA Alternate Configuration
 126      =1  EXTERN xdata volatile BYTE PORTCCFG          _AT_ 0xE671;  // I/O PORTC Alternate Configuration
 127      =1  EXTERN xdata volatile BYTE PORTECFG          _AT_ 0xE672;  // I/O PORTE Alternate Configuration
 128      =1  EXTERN xdata volatile BYTE I2CS              _AT_ 0xE678;  // Control & Status
 129      =1  EXTERN xdata volatile BYTE I2DAT             _AT_ 0xE679;  // Data
 130      =1  EXTERN xdata volatile BYTE I2CTL             _AT_ 0xE67A;  // I2C Control
 131      =1  EXTERN xdata volatile BYTE XAUTODAT1         _AT_ 0xE67B;  // Autoptr1 MOVX access
 132      =1  EXTERN xdata volatile BYTE XAUTODAT2         _AT_ 0xE67C;  // Autoptr2 MOVX access
 133      =1  
 134      =1  #define EXTAUTODAT1 XAUTODAT1
 135      =1  #define EXTAUTODAT2 XAUTODAT2
 136      =1  
 137      =1  // USB Control
 138      =1  
 139      =1  EXTERN xdata volatile BYTE USBCS             _AT_ 0xE680;  // USB Control & Status
 140      =1  EXTERN xdata volatile BYTE SUSPEND           _AT_ 0xE681;  // Put chip into suspend
 141      =1  EXTERN xdata volatile BYTE WAKEUPCS          _AT_ 0xE682;  // Wakeup source and polarity
 142      =1  EXTERN xdata volatile BYTE TOGCTL            _AT_ 0xE683;  // Toggle Control
 143      =1  EXTERN xdata volatile BYTE USBFRAMEH         _AT_ 0xE684;  // USB Frame count H
 144      =1  EXTERN xdata volatile BYTE USBFRAMEL         _AT_ 0xE685;  // USB Frame count L
 145      =1  EXTERN xdata volatile BYTE MICROFRAME        _AT_ 0xE686;  // Microframe count, 0-7
 146      =1  EXTERN xdata volatile BYTE FNADDR            _AT_ 0xE687;  // USB Function address
 147      =1  
 148      =1  // Endpoints
 149      =1  
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 9   

 150      =1  EXTERN xdata volatile BYTE EP0BCH            _AT_ 0xE68A;  // Endpoint 0 Byte Count H
 151      =1  EXTERN xdata volatile BYTE EP0BCL            _AT_ 0xE68B;  // Endpoint 0 Byte Count L
 152      =1  EXTERN xdata volatile BYTE EP1OUTBC          _AT_ 0xE68D;  // Endpoint 1 OUT Byte Count
 153      =1  EXTERN xdata volatile BYTE EP1INBC           _AT_ 0xE68F;  // Endpoint 1 IN Byte Count
 154      =1  EXTERN xdata volatile BYTE EP2BCH            _AT_ 0xE690;  // Endpoint 2 Byte Count H
 155      =1  EXTERN xdata volatile BYTE EP2BCL            _AT_ 0xE691;  // Endpoint 2 Byte Count L
 156      =1  EXTERN xdata volatile BYTE EP4BCH            _AT_ 0xE694;  // Endpoint 4 Byte Count H
 157      =1  EXTERN xdata volatile BYTE EP4BCL            _AT_ 0xE695;  // Endpoint 4 Byte Count L
 158      =1  EXTERN xdata volatile BYTE EP6BCH            _AT_ 0xE698;  // Endpoint 6 Byte Count H
 159      =1  EXTERN xdata volatile BYTE EP6BCL            _AT_ 0xE699;  // Endpoint 6 Byte Count L
 160      =1  EXTERN xdata volatile BYTE EP8BCH            _AT_ 0xE69C;  // Endpoint 8 Byte Count H
 161      =1  EXTERN xdata volatile BYTE EP8BCL            _AT_ 0xE69D;  // Endpoint 8 Byte Count L
 162      =1  EXTERN xdata volatile BYTE EP0CS             _AT_ 0xE6A0;  // Endpoint  Control and Status
 163      =1  EXTERN xdata volatile BYTE EP1OUTCS          _AT_ 0xE6A1;  // Endpoint 1 OUT Control and Status
 164      =1  EXTERN xdata volatile BYTE EP1INCS           _AT_ 0xE6A2;  // Endpoint 1 IN Control and Status
 165      =1  EXTERN xdata volatile BYTE EP2CS             _AT_ 0xE6A3;  // Endpoint 2 Control and Status
 166      =1  EXTERN xdata volatile BYTE EP4CS             _AT_ 0xE6A4;  // Endpoint 4 Control and Status
 167      =1  EXTERN xdata volatile BYTE EP6CS             _AT_ 0xE6A5;  // Endpoint 6 Control and Status
 168      =1  EXTERN xdata volatile BYTE EP8CS             _AT_ 0xE6A6;  // Endpoint 8 Control and Status
 169      =1  EXTERN xdata volatile BYTE EP2FIFOFLGS       _AT_ 0xE6A7;  // Endpoint 2 Flags
 170      =1  EXTERN xdata volatile BYTE EP4FIFOFLGS       _AT_ 0xE6A8;  // Endpoint 4 Flags
 171      =1  EXTERN xdata volatile BYTE EP6FIFOFLGS       _AT_ 0xE6A9;  // Endpoint 6 Flags
 172      =1  EXTERN xdata volatile BYTE EP8FIFOFLGS       _AT_ 0xE6AA;  // Endpoint 8 Flags
 173      =1  EXTERN xdata volatile BYTE EP2FIFOBCH        _AT_ 0xE6AB;  // EP2 FIFO total byte count H
 174      =1  EXTERN xdata volatile BYTE EP2FIFOBCL        _AT_ 0xE6AC;  // EP2 FIFO total byte count L
 175      =1  EXTERN xdata volatile BYTE EP4FIFOBCH        _AT_ 0xE6AD;  // EP4 FIFO total byte count H
 176      =1  EXTERN xdata volatile BYTE EP4FIFOBCL        _AT_ 0xE6AE;  // EP4 FIFO total byte count L
 177      =1  EXTERN xdata volatile BYTE EP6FIFOBCH        _AT_ 0xE6AF;  // EP6 FIFO total byte count H
 178      =1  EXTERN xdata volatile BYTE EP6FIFOBCL        _AT_ 0xE6B0;  // EP6 FIFO total byte count L
 179      =1  EXTERN xdata volatile BYTE EP8FIFOBCH        _AT_ 0xE6B1;  // EP8 FIFO total byte count H
 180      =1  EXTERN xdata volatile BYTE EP8FIFOBCL        _AT_ 0xE6B2;  // EP8 FIFO total byte count L
 181      =1  EXTERN xdata volatile BYTE SUDPTRH           _AT_ 0xE6B3;  // Setup Data Pointer high address byte
 182      =1  EXTERN xdata volatile BYTE SUDPTRL           _AT_ 0xE6B4;  // Setup Data Pointer low address byte
 183      =1  EXTERN xdata volatile BYTE SUDPTRCTL         _AT_ 0xE6B5;  // Setup Data Pointer Auto Mode
 184      =1  EXTERN xdata volatile BYTE SETUPDAT[8]       _AT_ 0xE6B8;  // 8 bytes of SETUP data
 185      =1  
 186      =1  // GPIF
 187      =1  
 188      =1  EXTERN xdata volatile BYTE GPIFWFSELECT      _AT_ 0xE6C0;  // Waveform Selector
 189      =1  EXTERN xdata volatile BYTE GPIFIDLECS        _AT_ 0xE6C1;  // GPIF Done, GPIF IDLE drive mode
 190      =1  EXTERN xdata volatile BYTE GPIFIDLECTL       _AT_ 0xE6C2;  // Inactive Bus, CTL states
 191      =1  EXTERN xdata volatile BYTE GPIFCTLCFG        _AT_ 0xE6C3;  // CTL OUT pin drive
 192      =1  EXTERN xdata volatile BYTE GPIFADRH          _AT_ 0xE6C4;  // GPIF Address H
 193      =1  EXTERN xdata volatile BYTE GPIFADRL          _AT_ 0xE6C5;  // GPIF Address L
 194      =1  
 195      =1  EXTERN xdata volatile BYTE GPIFTCB3          _AT_ 0xE6CE;  // GPIF Transaction Count Byte 3
 196      =1  EXTERN xdata volatile BYTE GPIFTCB2          _AT_ 0xE6CF;  // GPIF Transaction Count Byte 2
 197      =1  EXTERN xdata volatile BYTE GPIFTCB1          _AT_ 0xE6D0;  // GPIF Transaction Count Byte 1
 198      =1  EXTERN xdata volatile BYTE GPIFTCB0          _AT_ 0xE6D1;  // GPIF Transaction Count Byte 0
 199      =1  
 200      =1  #define EP2GPIFTCH GPIFTCB1   // these are here for backwards compatibility
 201      =1  #define EP2GPIFTCL GPIFTCB0   // 
 202      =1  #define EP4GPIFTCH GPIFTCB1   // these are here for backwards compatibility
 203      =1  #define EP4GPIFTCL GPIFTCB0   // 
 204      =1  #define EP6GPIFTCH GPIFTCB1   // these are here for backwards compatibility
 205      =1  #define EP6GPIFTCL GPIFTCB0   // 
 206      =1  #define EP8GPIFTCH GPIFTCB1   // these are here for backwards compatibility
 207      =1  #define EP8GPIFTCL GPIFTCB0   // 
 208      =1  
 209      =1  EXTERN xdata volatile BYTE EP2GPIFFLGSEL     _AT_ 0xE6D2;  // EP2 GPIF Flag select
 210      =1  EXTERN xdata volatile BYTE EP2GPIFPFSTOP     _AT_ 0xE6D3;  // Stop GPIF EP2 transaction on prog. flag
 211      =1  EXTERN xdata volatile BYTE EP2GPIFTRIG       _AT_ 0xE6D4;  // EP2 FIFO Trigger
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 10  

 212      =1  EXTERN xdata volatile BYTE EP4GPIFFLGSEL     _AT_ 0xE6DA;  // EP4 GPIF Flag select
 213      =1  EXTERN xdata volatile BYTE EP4GPIFPFSTOP     _AT_ 0xE6DB;  // Stop GPIF EP4 transaction on prog. flag
 214      =1  EXTERN xdata volatile BYTE EP4GPIFTRIG       _AT_ 0xE6DC;  // EP4 FIFO Trigger
 215      =1  EXTERN xdata volatile BYTE EP6GPIFFLGSEL     _AT_ 0xE6E2;  // EP6 GPIF Flag select
 216      =1  EXTERN xdata volatile BYTE EP6GPIFPFSTOP     _AT_ 0xE6E3;  // Stop GPIF EP6 transaction on prog. flag
 217      =1  EXTERN xdata volatile BYTE EP6GPIFTRIG       _AT_ 0xE6E4;  // EP6 FIFO Trigger
 218      =1  EXTERN xdata volatile BYTE EP8GPIFFLGSEL     _AT_ 0xE6EA;  // EP8 GPIF Flag select
 219      =1  EXTERN xdata volatile BYTE EP8GPIFPFSTOP     _AT_ 0xE6EB;  // Stop GPIF EP8 transaction on prog. flag
 220      =1  EXTERN xdata volatile BYTE EP8GPIFTRIG       _AT_ 0xE6EC;  // EP8 FIFO Trigger
 221      =1  EXTERN xdata volatile BYTE XGPIFSGLDATH      _AT_ 0xE6F0;  // GPIF Data H (16-bit mode only)
 222      =1  EXTERN xdata volatile BYTE XGPIFSGLDATLX     _AT_ 0xE6F1;  // Read/Write GPIF Data L & trigger transac
 223      =1  EXTERN xdata volatile BYTE XGPIFSGLDATLNOX   _AT_ 0xE6F2;  // Read GPIF Data L, no transac trigger
 224      =1  EXTERN xdata volatile BYTE GPIFREADYCFG      _AT_ 0xE6F3;  // Internal RDY,Sync/Async, RDY5CFG
 225      =1  EXTERN xdata volatile BYTE GPIFREADYSTAT     _AT_ 0xE6F4;  // RDY pin states
 226      =1  EXTERN xdata volatile BYTE GPIFABORT         _AT_ 0xE6F5;  // Abort GPIF cycles
 227      =1  
 228      =1  // UDMA
 229      =1  
 230      =1  EXTERN xdata volatile BYTE FLOWSTATE         _AT_  0xE6C6; //Defines GPIF flow state
 231      =1  EXTERN xdata volatile BYTE FLOWLOGIC         _AT_  0xE6C7; //Defines flow/hold decision criteria
 232      =1  EXTERN xdata volatile BYTE FLOWEQ0CTL        _AT_  0xE6C8; //CTL states during active flow state
 233      =1  EXTERN xdata volatile BYTE FLOWEQ1CTL        _AT_  0xE6C9; //CTL states during hold flow state
 234      =1  EXTERN xdata volatile BYTE FLOWHOLDOFF       _AT_  0xE6CA;
 235      =1  EXTERN xdata volatile BYTE FLOWSTB           _AT_  0xE6CB; //CTL/RDY Signal to use as master data strobe 
 236      =1  EXTERN xdata volatile BYTE FLOWSTBEDGE       _AT_  0xE6CC; //Defines active master strobe edge
 237      =1  EXTERN xdata volatile BYTE FLOWSTBHPERIOD    _AT_  0xE6CD; //Half Period of output master strobe
 238      =1  EXTERN xdata volatile BYTE GPIFHOLDAMOUNT    _AT_  0xE60C; //Data delay shift 
 239      =1  EXTERN xdata volatile BYTE UDMACRCH          _AT_  0xE67D; //CRC Upper byte
 240      =1  EXTERN xdata volatile BYTE UDMACRCL          _AT_  0xE67E; //CRC Lower byte
 241      =1  EXTERN xdata volatile BYTE UDMACRCQUAL       _AT_  0xE67F; //UDMA In only, host terminated use only
 242      =1  
 243      =1  
 244      =1  // Debug/Test
 245      =1  // The following registers are for Cypress's internal testing purposes only.
 246      =1  // These registers are not documented in the datasheet or the Technical Reference
 247      =1  // Manual as they were not designed for end user application usage 
 248      =1  EXTERN xdata volatile BYTE DBUG              _AT_ 0xE6F8;  // Debug
 249      =1  EXTERN xdata volatile BYTE TESTCFG           _AT_ 0xE6F9;  // Test configuration
 250      =1  EXTERN xdata volatile BYTE USBTEST           _AT_ 0xE6FA;  // USB Test Modes
 251      =1  EXTERN xdata volatile BYTE CT1               _AT_ 0xE6FB;  // Chirp Test--Override
 252      =1  EXTERN xdata volatile BYTE CT2               _AT_ 0xE6FC;  // Chirp Test--FSM
 253      =1  EXTERN xdata volatile BYTE CT3               _AT_ 0xE6FD;  // Chirp Test--Control Signals
 254      =1  EXTERN xdata volatile BYTE CT4               _AT_ 0xE6FE;  // Chirp Test--Inputs
 255      =1  
 256      =1  // Endpoint Buffers
 257      =1  
 258      =1  EXTERN xdata volatile BYTE EP0BUF[64]        _AT_ 0xE740;  // EP0 IN-OUT buffer
 259      =1  EXTERN xdata volatile BYTE EP1OUTBUF[64]     _AT_ 0xE780;  // EP1-OUT buffer
 260      =1  EXTERN xdata volatile BYTE EP1INBUF[64]      _AT_ 0xE7C0;  // EP1-IN buffer
 261      =1  EXTERN xdata volatile BYTE EP2FIFOBUF[1024]  _AT_ 0xF000;  // 512/1024-byte EP2 buffer (IN or OUT)
 262      =1  EXTERN xdata volatile BYTE EP4FIFOBUF[1024]  _AT_ 0xF400;  // 512 byte EP4 buffer (IN or OUT)
 263      =1  EXTERN xdata volatile BYTE EP6FIFOBUF[1024]  _AT_ 0xF800;  // 512/1024-byte EP6 buffer (IN or OUT)
 264      =1  EXTERN xdata volatile BYTE EP8FIFOBUF[1024]  _AT_ 0xFC00;  // 512 byte EP8 buffer (IN or OUT)
 265      =1  
 266      =1  // Error Correction Code (ECC) Registers (FX2LP/FX1 only)
 267      =1  
 268      =1  EXTERN xdata volatile BYTE ECCCFG            _AT_ 0xE628;  // ECC Configuration
 269      =1  EXTERN xdata volatile BYTE ECCRESET          _AT_ 0xE629;  // ECC Reset
 270      =1  EXTERN xdata volatile BYTE ECC1B0            _AT_ 0xE62A;  // ECC1 Byte 0
 271      =1  EXTERN xdata volatile BYTE ECC1B1            _AT_ 0xE62B;  // ECC1 Byte 1
 272      =1  EXTERN xdata volatile BYTE ECC1B2            _AT_ 0xE62C;  // ECC1 Byte 2
 273      =1  EXTERN xdata volatile BYTE ECC2B0            _AT_ 0xE62D;  // ECC2 Byte 0
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 11  

 274      =1  EXTERN xdata volatile BYTE ECC2B1            _AT_ 0xE62E;  // ECC2 Byte 1
 275      =1  EXTERN xdata volatile BYTE ECC2B2            _AT_ 0xE62F;  // ECC2 Byte 2
 276      =1  
 277      =1  // Feature Registers  (FX2LP/FX1 only)
 278      =1  EXTERN xdata volatile BYTE GPCR2             _AT_ 0xE50D;  // Chip Features
 279      =1  
 280      =1  #undef EXTERN
 281      =1  #undef _AT_
 282      =1  
 283      =1  /*-----------------------------------------------------------------------------
 284      =1     Special Function Registers (SFRs)
 285      =1     The byte registers and bits defined in the following list are based
 286      =1     on the Synopsis definition of the 8051 Special Function Registers for EZ-USB. 
 287      =1      If you modify the register definitions below, please regenerate the file 
 288      =1      "ezregs.inc" which includes the same basic information for assembly inclusion.
 289      =1  -----------------------------------------------------------------------------*/
 290      =1  
 291      =1  sfr IOA     = 0x80;
 292      =1           /*  IOA  */
 293      =1           sbit PA0    = 0x80 + 0;
 294      =1           sbit PA1    = 0x80 + 1;
 295      =1           sbit PA2    = 0x80 + 2;
 296      =1           sbit PA3    = 0x80 + 3;
 297      =1  
 298      =1           sbit PA4    = 0x80 + 4;
 299      =1           sbit PA5    = 0x80 + 5;
 300      =1           sbit PA6    = 0x80 + 6;
 301      =1           sbit PA7    = 0x80 + 7;
 302      =1  sfr SP      = 0x81;
 303      =1  sfr DPL     = 0x82;
 304      =1  sfr DPH     = 0x83;
 305      =1  sfr DPL1    = 0x84;
 306      =1  sfr DPH1    = 0x85;
 307      =1  sfr DPS     = 0x86;
 308      =1           /*  DPS  */
 309      =1           // sbit SEL   = 0x86+0;
 310      =1  sfr PCON    = 0x87;
 311      =1           /*  PCON  */
 312      =1           //sbit IDLE   = 0x87+0;
 313      =1           //sbit STOP   = 0x87+1;
 314      =1           //sbit GF0    = 0x87+2;
 315      =1           //sbit GF1    = 0x87+3;
 316      =1           //sbit SMOD0  = 0x87+7;
 317      =1  sfr TCON    = 0x88;
 318      =1           /*  TCON  */
 319      =1           sbit IT0    = 0x88+0;
 320      =1           sbit IE0    = 0x88+1;
 321      =1           sbit IT1    = 0x88+2;
 322      =1           sbit IE1    = 0x88+3;
 323      =1           sbit TR0    = 0x88+4;
 324      =1           sbit TF0    = 0x88+5;
 325      =1           sbit TR1    = 0x88+6;
 326      =1           sbit TF1    = 0x88+7;
 327      =1  sfr TMOD    = 0x89;
 328      =1           /*  TMOD  */
 329      =1           //sbit M00    = 0x89+0;
 330      =1           //sbit M10    = 0x89+1;
 331      =1           //sbit CT0    = 0x89+2;
 332      =1           //sbit GATE0  = 0x89+3;
 333      =1           //sbit M01    = 0x89+4;
 334      =1           //sbit M11    = 0x89+5;
 335      =1           //sbit CT1    = 0x89+6;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 12  

 336      =1           //sbit GATE1  = 0x89+7;
 337      =1  sfr TL0     = 0x8A;
 338      =1  sfr TL1     = 0x8B;
 339      =1  sfr TH0     = 0x8C;
 340      =1  sfr TH1     = 0x8D;
 341      =1  sfr CKCON   = 0x8E;
 342      =1           /*  CKCON  */
 343      =1           //sbit MD0    = 0x89+0;
 344      =1           //sbit MD1    = 0x89+1;
 345      =1           //sbit MD2    = 0x89+2;
 346      =1           //sbit T0M    = 0x89+3;
 347      =1           //sbit T1M    = 0x89+4;
 348      =1           //sbit T2M    = 0x89+5;
 349      =1  sfr SPC_FNC = 0x8F; // Was WRS in Reg320
 350      =1           /*  CKCON  */
 351      =1           //sbit WRS    = 0x8F+0;
 352      =1  sfr IOB     = 0x90;
 353      =1           /*  IOB  */
 354      =1           sbit PB0    = 0x90 + 0;
 355      =1           sbit PB1    = 0x90 + 1;
 356      =1           sbit PB2    = 0x90 + 2;
 357      =1           sbit PB3    = 0x90 + 3;
 358      =1  
 359      =1           sbit PB4    = 0x90 + 4;
 360      =1           sbit PB5    = 0x90 + 5;
 361      =1           sbit PB6    = 0x90 + 6;
 362      =1           sbit PB7    = 0x90 + 7;
 363      =1  sfr EXIF    = 0x91; // EXIF Bit Values differ from Reg320
 364      =1           /*  EXIF  */
 365      =1           //sbit USBINT = 0x91+4;
 366      =1           //sbit I2CINT = 0x91+5;
 367      =1           //sbit IE4    = 0x91+6;
 368      =1           //sbit IE5    = 0x91+7;
 369      =1  sfr MPAGE  = 0x92;
 370      =1  sfr SCON0  = 0x98;
 371      =1           /*  SCON0  */
 372      =1           sbit RI    = 0x98+0;
 373      =1           sbit TI    = 0x98+1;
 374      =1           sbit RB8   = 0x98+2;
 375      =1           sbit TB8   = 0x98+3;
 376      =1           sbit REN   = 0x98+4;
 377      =1           sbit SM2   = 0x98+5;
 378      =1           sbit SM1   = 0x98+6;
 379      =1           sbit SM0   = 0x98+7;
 380      =1  sfr SBUF0  = 0x99;
 381      =1  
 382      =1  #define AUTOPTR1H AUTOPTRH1 // for backwards compatibility with examples
 383      =1  #define AUTOPTR1L AUTOPTRL1 // for backwards compatibility with examples
 384      =1  #define APTR1H AUTOPTRH1 // for backwards compatibility with examples
 385      =1  #define APTR1L AUTOPTRL1 // for backwards compatibility with examples
 386      =1  
 387      =1  // this is how they are defined in the TRM
 388      =1  sfr AUTOPTRH1     = 0x9A; 
 389      =1  sfr AUTOPTRL1     = 0x9B; 
 390      =1  sfr AUTOPTRH2     = 0x9D;
 391      =1  sfr AUTOPTRL2     = 0x9E; 
 392      =1  
 393      =1  sfr IOC        = 0xA0;
 394      =1           /*  IOC  */
 395      =1           sbit PC0    = 0xA0 + 0;
 396      =1           sbit PC1    = 0xA0 + 1;
 397      =1           sbit PC2    = 0xA0 + 2;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 13  

 398      =1           sbit PC3    = 0xA0 + 3;
 399      =1  
 400      =1           sbit PC4    = 0xA0 + 4;
 401      =1           sbit PC5    = 0xA0 + 5;
 402      =1           sbit PC6    = 0xA0 + 6;
 403      =1           sbit PC7    = 0xA0 + 7;
 404      =1  sfr INT2CLR    = 0xA1;
 405      =1  sfr INT4CLR    = 0xA2;
 406      =1  
 407      =1  sfr IE     = 0xA8;
 408      =1           /*  IE  */
 409      =1           sbit EX0   = 0xA8+0;
 410      =1           sbit ET0   = 0xA8+1;
 411      =1           sbit EX1   = 0xA8+2;
 412      =1           sbit ET1   = 0xA8+3;
 413      =1           sbit ES0   = 0xA8+4;
 414      =1           sbit ET2   = 0xA8+5;
 415      =1           sbit ES1   = 0xA8+6;
 416      =1           sbit EA    = 0xA8+7;
 417      =1  
 418      =1  sfr EP2468STAT     = 0xAA;
 419      =1           /* EP2468STAT */
 420      =1           //sbit EP2E   = 0xAA+0;
 421      =1           //sbit EP2F   = 0xAA+1;
 422      =1           //sbit EP4E   = 0xAA+2;
 423      =1           //sbit EP4F   = 0xAA+3;
 424      =1           //sbit EP6E   = 0xAA+4;
 425      =1           //sbit EP6F   = 0xAA+5;
 426      =1           //sbit EP8E   = 0xAA+6;
 427      =1           //sbit EP8F   = 0xAA+7;
 428      =1  
 429      =1  sfr EP24FIFOFLGS   = 0xAB;
 430      =1  sfr EP68FIFOFLGS   = 0xAC;
 431      =1  sfr AUTOPTRSETUP  = 0xAF;
 432      =1           /* AUTOPTRSETUP */
 433      =1           //   sbit EXTACC  = 0xAF+0;
 434      =1           //   sbit APTR1FZ = 0xAF+1;
 435      =1           //   sbit APTR2FZ = 0xAF+2;
 436      =1  
 437      =1  sfr IOD     = 0xB0;
 438      =1           /*  IOD  */
 439      =1           sbit PD0    = 0xB0 + 0;
 440      =1           sbit PD1    = 0xB0 + 1;
 441      =1           sbit PD2    = 0xB0 + 2;
 442      =1           sbit PD3    = 0xB0 + 3;
 443      =1  
 444      =1           sbit PD4    = 0xB0 + 4;
 445      =1           sbit PD5    = 0xB0 + 5;
 446      =1           sbit PD6    = 0xB0 + 6;
 447      =1           sbit PD7    = 0xB0 + 7;
 448      =1  sfr IOE     = 0xB1;
 449      =1  sfr OEA     = 0xB2;
 450      =1  sfr OEB     = 0xB3;
 451      =1  sfr OEC     = 0xB4;
 452      =1  sfr OED     = 0xB5;
 453      =1  sfr OEE     = 0xB6;
 454      =1  
 455      =1  sfr IP     = 0xB8;
 456      =1           /*  IP  */
 457      =1           sbit PX0   = 0xB8+0;
 458      =1           sbit PT0   = 0xB8+1;
 459      =1           sbit PX1   = 0xB8+2;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 14  

 460      =1           sbit PT1   = 0xB8+3;
 461      =1           sbit PS0   = 0xB8+4;
 462      =1           sbit PT2   = 0xB8+5;
 463      =1           sbit PS1   = 0xB8+6;
 464      =1  
 465      =1  sfr EP01STAT    = 0xBA;
 466      =1  sfr GPIFTRIG    = 0xBB;
 467      =1                  
 468      =1  sfr GPIFSGLDATH     = 0xBD;
 469      =1  sfr GPIFSGLDATLX    = 0xBE;
 470      =1  sfr GPIFSGLDATLNOX  = 0xBF;
 471      =1  
 472      =1  sfr SCON1  = 0xC0;
 473      =1           /*  SCON1  */
 474      =1           sbit RI1   = 0xC0+0;
 475      =1           sbit TI1   = 0xC0+1;
 476      =1           sbit RB81  = 0xC0+2;
 477      =1           sbit TB81  = 0xC0+3;
 478      =1           sbit REN1  = 0xC0+4;
 479      =1           sbit SM21  = 0xC0+5;
 480      =1           sbit SM11  = 0xC0+6;
 481      =1           sbit SM01  = 0xC0+7;
 482      =1  sfr SBUF1  = 0xC1;
 483      =1  sfr T2CON  = 0xC8;
 484      =1           /*  T2CON  */
 485      =1           sbit CP_RL2 = 0xC8+0;
 486      =1           sbit C_T2  = 0xC8+1;
 487      =1           sbit TR2   = 0xC8+2;
 488      =1           sbit EXEN2 = 0xC8+3;
 489      =1           sbit TCLK  = 0xC8+4;
 490      =1           sbit RCLK  = 0xC8+5;
 491      =1           sbit EXF2  = 0xC8+6;
 492      =1           sbit TF2   = 0xC8+7;
 493      =1  sfr RCAP2L = 0xCA;
 494      =1  sfr RCAP2H = 0xCB;
 495      =1  sfr TL2    = 0xCC;
 496      =1  sfr TH2    = 0xCD;
 497      =1  sfr PSW    = 0xD0;
 498      =1           /*  PSW  */
 499      =1           sbit P     = 0xD0+0;
 500      =1           sbit FL    = 0xD0+1;
 501      =1           sbit OV    = 0xD0+2;
 502      =1           sbit RS0   = 0xD0+3;
 503      =1           sbit RS1   = 0xD0+4;
 504      =1           sbit F0    = 0xD0+5;
 505      =1           sbit AC    = 0xD0+6;
 506      =1           sbit CY    = 0xD0+7;
 507      =1  sfr EICON  = 0xD8; // Was WDCON in DS80C320; Bit Values differ from Reg320
 508      =1           /*  EICON  */
 509      =1           sbit INT6  = 0xD8+3;
 510      =1           sbit RESI  = 0xD8+4;
 511      =1           sbit ERESI = 0xD8+5;
 512      =1           sbit SMOD1 = 0xD8+7;
 513      =1  sfr ACC    = 0xE0;
 514      =1  sfr EIE    = 0xE8; // EIE Bit Values differ from Reg320
 515      =1           /*  EIE  */
 516      =1           sbit EUSB    = 0xE8+0;
 517      =1           sbit EI2C    = 0xE8+1;
 518      =1           sbit EIEX4   = 0xE8+2;
 519      =1           sbit EIEX5   = 0xE8+3;
 520      =1           sbit EIEX6   = 0xE8+4;
 521      =1  sfr B      = 0xF0;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 15  

 522      =1  sfr EIP    = 0xF8; // EIP Bit Values differ from Reg320
 523      =1           /*  EIP  */
 524      =1           sbit PUSB    = 0xF8+0;
 525      =1           sbit PI2C    = 0xF8+1;
 526      =1           sbit EIPX4   = 0xF8+2;
 527      =1           sbit EIPX5   = 0xF8+3;
 528      =1           sbit EIPX6   = 0xF8+4;
 529      =1  
 530      =1  /*-----------------------------------------------------------------------------
 531      =1     Bit Masks
 532      =1  -----------------------------------------------------------------------------*/
 533      =1  
 534      =1  /* CPU Control & Status Register (CPUCS) */
 535      =1  #define bmPRTCSTB    bmBIT5
 536      =1  #define bmCLKSPD     (bmBIT4 | bmBIT3)
 537      =1  #define bmCLKSPD1    bmBIT4
 538      =1  #define bmCLKSPD0    bmBIT3
 539      =1  #define bmCLKINV     bmBIT2
 540      =1  #define bmCLKOE      bmBIT1
 541      =1  #define bm8051RES    bmBIT0
 542      =1  /* Port Alternate Configuration Registers */
 543      =1  /* Port A (PORTACFG) */
 544      =1  #define bmFLAGD      bmBIT7
 545      =1  #define bmINT1       bmBIT1
 546      =1  #define bmINT0       bmBIT0
 547      =1  /* Port C (PORTCCFG) */
 548      =1  #define bmGPIFA7     bmBIT7
 549      =1  #define bmGPIFA6     bmBIT6
 550      =1  #define bmGPIFA5     bmBIT5
 551      =1  #define bmGPIFA4     bmBIT4
 552      =1  #define bmGPIFA3     bmBIT3
 553      =1  #define bmGPIFA2     bmBIT2
 554      =1  #define bmGPIFA1     bmBIT1
 555      =1  #define bmGPIFA0     bmBIT0
 556      =1  /* Port E (PORTECFG) */
 557      =1  #define bmGPIFA8     bmBIT7
 558      =1  #define bmT2EX       bmBIT6
 559      =1  #define bmINT6       bmBIT5
 560      =1  #define bmRXD1OUT    bmBIT4
 561      =1  #define bmRXD0OUT    bmBIT3
 562      =1  #define bmT2OUT      bmBIT2
 563      =1  #define bmT1OUT      bmBIT1
 564      =1  #define bmT0OUT      bmBIT0
 565      =1  
 566      =1  /* I2C Control & Status Register (I2CS) */
 567      =1  #define bmSTART      bmBIT7
 568      =1  #define bmSTOP       bmBIT6
 569      =1  #define bmLASTRD     bmBIT5
 570      =1  #define bmID         (bmBIT4 | bmBIT3)
 571      =1  #define bmBERR       bmBIT2
 572      =1  #define bmACK        bmBIT1
 573      =1  #define bmDONE       bmBIT0
 574      =1  /* I2C Control Register (I2CTL) */
 575      =1  #define bmSTOPIE     bmBIT1
 576      =1  #define bm400KHZ     bmBIT0
 577      =1  /* Interrupt 2 (USB) Autovector Register (INT2IVEC) */
 578      =1  #define bmIV4        bmBIT6
 579      =1  #define bmIV3        bmBIT5
 580      =1  #define bmIV2        bmBIT4
 581      =1  #define bmIV1        bmBIT3
 582      =1  #define bmIV0        bmBIT2
 583      =1  /* USB Interrupt Request & Enable Registers (USBIE/USBIRQ) */
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 16  

 584      =1  #define bmEP0ACK     bmBIT6
 585      =1  #define bmHSGRANT    bmBIT5
 586      =1  #define bmURES       bmBIT4
 587      =1  #define bmSUSP       bmBIT3
 588      =1  #define bmSUTOK      bmBIT2
 589      =1  #define bmSOF        bmBIT1
 590      =1  #define bmSUDAV      bmBIT0
 591      =1  /* Breakpoint register (BREAKPT) */
 592      =1  #define bmBREAK      bmBIT3
 593      =1  #define bmBPPULSE    bmBIT2
 594      =1  #define bmBPEN       bmBIT1
 595      =1  /* Interrupt 2 & 4 Setup (INTSETUP) */
 596      =1  #define bmAV2EN      bmBIT3
 597      =1  #define INT4IN       bmBIT1
 598      =1  #define bmAV4EN      bmBIT0
 599      =1  /* USB Control & Status Register (USBCS) */
 600      =1  #define bmHSM        bmBIT7
 601      =1  #define bmDISCON     bmBIT3
 602      =1  #define bmNOSYNSOF   bmBIT2
 603      =1  #define bmRENUM      bmBIT1
 604      =1  #define bmSIGRESUME  bmBIT0
 605      =1  /* Wakeup Control and Status Register (WAKEUPCS) */
 606      =1  #define bmWU2        bmBIT7
 607      =1  #define bmWU         bmBIT6
 608      =1  #define bmWU2POL     bmBIT5
 609      =1  #define bmWUPOL      bmBIT4
 610      =1  #define bmDPEN       bmBIT2
 611      =1  #define bmWU2EN      bmBIT1
 612      =1  #define bmWUEN       bmBIT0
 613      =1  /* End Point 0 Control & Status Register (EP0CS) */
 614      =1  #define bmHSNAK      bmBIT7
 615      =1  /* End Point 0-1 Control & Status Registers (EP0CS/EP1OUTCS/EP1INCS) */
 616      =1  #define bmEPBUSY     bmBIT1
 617      =1  #define bmEPSTALL    bmBIT0
 618      =1  /* End Point 2-8 Control & Status Registers (EP2CS/EP4CS/EP6CS/EP8CS) */
 619      =1  #define bmNPAK       (bmBIT6 | bmBIT5 | bmBIT4)
 620      =1  #define bmEPFULL     bmBIT3
 621      =1  #define bmEPEMPTY    bmBIT2
 622      =1  /* Endpoint Status (EP2468STAT) SFR bits */
 623      =1  #define bmEP8FULL    bmBIT7
 624      =1  #define bmEP8EMPTY   bmBIT6
 625      =1  #define bmEP6FULL    bmBIT5
 626      =1  #define bmEP6EMPTY   bmBIT4
 627      =1  #define bmEP4FULL    bmBIT3
 628      =1  #define bmEP4EMPTY   bmBIT2
 629      =1  #define bmEP2FULL    bmBIT1
 630      =1  #define bmEP2EMPTY   bmBIT0
 631      =1  /* SETUP Data Pointer Auto Mode (SUDPTRCTL) */
 632      =1  #define bmSDPAUTO    bmBIT0
 633      =1  /* Endpoint Data Toggle Control (TOGCTL) */
 634      =1  #define bmQUERYTOGGLE  bmBIT7
 635      =1  #define bmSETTOGGLE    bmBIT6
 636      =1  #define bmRESETTOGGLE  bmBIT5
 637      =1  #define bmTOGCTLEPMASK bmBIT3 | bmBIT2 | bmBIT1 | bmBIT0
 638      =1  /* IBN (In Bulk Nak) enable and request bits (IBNIE/IBNIRQ) */
 639      =1  #define bmEP8IBN     bmBIT5
 640      =1  #define bmEP6IBN     bmBIT4
 641      =1  #define bmEP4IBN     bmBIT3
 642      =1  #define bmEP2IBN     bmBIT2
 643      =1  #define bmEP1IBN     bmBIT1
 644      =1  #define bmEP0IBN     bmBIT0
 645      =1  
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 17  

 646      =1  /* PING-NAK enable and request bits (NAKIE/NAKIRQ) */
 647      =1  #define bmEP8PING     bmBIT7
 648      =1  #define bmEP6PING     bmBIT6
 649      =1  #define bmEP4PING     bmBIT5
 650      =1  #define bmEP2PING     bmBIT4
 651      =1  #define bmEP1PING     bmBIT3
 652      =1  #define bmEP0PING     bmBIT2
 653      =1  #define bmIBN         bmBIT0
 654      =1  
 655      =1  /* Interface Configuration bits (IFCONFIG) */
 656      =1  #define bmIFCLKSRC    bmBIT7
 657      =1  #define bm3048MHZ     bmBIT6
 658      =1  #define bmIFCLKOE     bmBIT5
 659      =1  #define bmIFCLKPOL    bmBIT4
 660      =1  #define bmASYNC       bmBIT3
 661      =1  #define bmGSTATE      bmBIT2
 662      =1  #define bmIFCFG1      bmBIT1
 663      =1  #define bmIFCFG0      bmBIT0
 664      =1  #define bmIFCFGMASK   (bmIFCFG0 | bmIFCFG1)
 665      =1  #define bmIFGPIF      bmIFCFG1
 666      =1  
 667      =1  /* EP 2468 FIFO Configuration bits (EP2FIFOCFG,EP4FIFOCFG,EP6FIFOCFG,EP8FIFOCFG) */
 668      =1  #define bmINFM       bmBIT6
 669      =1  #define bmOEP        bmBIT5
 670      =1  #define bmAUTOOUT    bmBIT4
 671      =1  #define bmAUTOIN     bmBIT3
 672      =1  #define bmZEROLENIN  bmBIT2
 673      =1  #define bmWORDWIDE   bmBIT0
 674      =1  
 675      =1  /* Chip Revision Control Bits (REVCTL) - used to ebable/disable revision specidic
 676      =1     features */ 
 677      =1  #define bmNOAUTOARM    bmBIT1
 678      =1  #define bmSKIPCOMMIT   bmBIT0
 679      =1  
 680      =1  /* Fifo Reset bits (FIFORESET) */
 681      =1  #define bmNAKALL       bmBIT7
 682      =1  
 683      =1  /* Chip Feature Register (GPCR2) */
 684      =1  #define bmFULLSPEEDONLY    bmBIT4
 685      =1  
 686      =1  #endif   /* FX2REGS_H */
   9          #include "common_def.h"
   1      =1  #ifndef COMMON_DEF_H            //Header sentry
   2      =1  #define COMMON_DEF_H
   3      =1  
   4      =1  // GLOBAL DEFINES
   5      =1  // #define EZ_COMPIL 1
   6      =1  
   7      =1  //#define SIMUL 1
   8      =1  
   9      =1  // MIDI MERGERS BUFFERS LENGHT
  10      =1  #define MIDI_IN_FROM_CON_BUFF_LENGHT    128     // V1.5 128
  11      =1  #define MIDI_IN_FROM_USB_BUFF_LENGHT    128 // V1.5 128
  12      =1  #define SERIAL_IN_FROM_Z8_BUFF_LENGHT   128 // V1.5 128 
  13      =1  #define MIDI_IN_REALTIME_BUFF_LENGHT    8
  14      =1  
  15      =1  typedef struct {
  16      =1  BYTE start_index;                                                       // start index on input buffer
  17      =1  volatile BYTE end_index;                                        // end index on input buffer
  18      =1  BYTE merger_state;                                                      // merger state of input buffer
  19      =1  volatile BYTE current_index;                            // current index on input buffer
  20      =1  volatile BYTE input_status;                                     // Status register : see bits definition below
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 18  

  21      =1  BYTE buffer[MIDI_IN_FROM_CON_BUFF_LENGHT];      // input buffer
  22      =1  } Midi_In_Struct;
  23      =1  
  24      =1  
  25      =1  // bits definition for input_status in the aove structure
  26      =1  #define input_overflow                  (1 << 0)        // bit 0 : input overflow
  27      =1  
  28      =1  typedef struct {
  29      =1  BYTE realtime[MIDI_IN_REALTIME_BUFF_LENGHT];// realtime midi input buffer
  30      =1  BYTE realtime_start_index;                                      // current index on realtime buffer
  31      =1  BYTE realtime_end_index;                                        // current index on realtime buffer
  32      =1  volatile BYTE input_status;                                     // Status register : see bits definition below
  33      =1  } Midi_In_Realtime_Struct;
  34      =1  
  35      =1  // bits definition for input_status in the above realtime structure
  36      =1  #define realtime_overflow               (1 << 0)        // bit 0 : realtime input overflow
  37      =1  
  38      =1  // enums for the following registers updated from Z8 board
  39      =1  // enum {CTRL_REG_0_7BITS_FROM_Z8,CTRL_REG_1_7BITS_FROM_Z8  };
  40      =1  
  41      =1  #endif
  10          #include <common_z8_ez.h>
   1      =1  #ifndef COMMON_Z8_EZ
   2      =1  #define COMMON_Z8_EZ
   3      =1  
   4      =1  typedef unsigned char uchar;
   5      =1  typedef unsigned int  uint;
   6      =1  
   7      =1  #define Z8_FREQ 20000000ul      // 20.0 MHz
   8      =1  
   9      =1  #define BAUD_Z8_EZ                              31250L                  // 62.5K baud for UART0
  10      =1  #define BAUD_OCD_Z8_EZ                  62500L                  // 62.5K baud for Z8 On Chip debugger (Must be > 39kb at 20MHz)
  11      =1  
  12      =1  
  13      =1  // #define HW_V10       1 // uncoment only if hw v1.0 (usb monitor pin and cancel pins are inverted)
  14      =1  
  15      =1  #define FW_VERSION_INDEX                0U
  16      =1  #define FW_SUB_VERSION_INDEX    1U
  17      =1  #define HW_VERSION_INDEX                2U
  18      =1  #define HW_SUB_VERSION_INDEX    3U
  19      =1  #define MANUF_YEAR_INDEX                4U
  20      =1  #define MANUF_MONTH_INDEX               5U
  21      =1  #define SERIAL_4_INDEX                  6U
  22      =1  #define SERIAL_3_INDEX                  7U
  23      =1  #define SERIAL_2_INDEX                  8U
  24      =1  #define SERIAL_1_INDEX                  9U
  25      =1  #define SERIAL_0_INDEX                  10U
  26      =1  
  27      =1  #define IDENTITY_LENGHT                 11
  28      =1  
  29      =1  // Z8_STATUS_0_NVM bits definition (MUST BE LOADED From NVM AT STARTUP)
  30      =1  // bit 7 always 0
  31      =1  #define new_video_mode_z0nvm            (1<<6)  // 1 = inverted
  32      =1  #define video_mode_z0nvm                        (1<<5)  // 1 = inverted
  33      =1  #define encoder_tempo_lock_z0nvm        (1<<4)  // 1 = lock tempo encoder
  34      =1  #define mtc_mode_on_off_z0nvm           (1<<3)  // 1 = realtime off, 0 = realtime on    DO NOT CHANGE ORDER
  35      =1  #define mtc_mode_z0nvm                          (1<<2)  // 1 = mtc / 0 = midi clock                             DO NOT CHANGE ORDER
  36      =1  #define hook_zjump_mode_z0nvm           (1<<1)  // 1 = jumpless
  37      =1  #define jog_lock_z0nvm                          (1<<0)  // 1 = lock big encoder
  38      =1  
  39      =1  #define MTC_MODE_MASK_BIT       0x0C    // Bits 2 & 3
  40      =1  
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 19  

  41      =1  // Z8_STATUS_1_NVM bits definition (MUST BE LOADED From NVM AT STARTUP)
  42      =1  // bit 7 always 0
  43      =1  #define must_autoassign_z1nvm           (1<<6)  // 1 = must auto assign
  44      =1  #define smpte_frame_rate_1_z1nvm        (1<<2)  // 0 0 = 24 fps         0 1 = 25 fps            DO NOT CHANGE ORDER
  45      =1  #define smpte_frame_rate_0_z1nvm        (1<<1)  // 1 0 = 30 fps nd      1 1 = 30 fps            DO NOT CHANGE ORDER
  46      =1  
  47      =1  #define SMPTE_FRAME_RATE_MASK_BIT       0x06    // Bits 1 & 2
  48      =1  
  49      =1  // Z8_STATUS_2_NVM bits definition (MUST BE LOADED From NVM AT STARTUP)
  50      =1  // bit 7 always 0
  51      =1  
  52      =1  ////////////////////////////////////////////////////////////////////////////////////////////////////////
  53      =1  /////////////////////////// REGISTERS THAT MUST BE SENT TO EZ AT STARTUP ///////////////////////////////
  54      =1  
  55      =1  // CTRL_REG_0_7BITS_TO_EZ bits definition (MUST BE LOADED From NVM AT STARTUP, MUST BE SENT TO EZBOARD)
  56      =1  // Bit 7 must be 0 since this control reg is sent to EZBOARD
  57      =1  #define filter_state_z_ez0_bit_pos                              6       
  58      =1  //#define                                                                               5       
  59      =1  #define filter_type_z_ez0_bit_pos                               4
  60      =1  #define midi_thru_ez0_bit_pos                                   3       
  61      =1  //#define merger_src_midi_in_state_z_ez0_bit_pos        3
  62      =1  //#define merger_src_usb_in_state_z_ez0_bit_pos 2
  63      =1  //#define merger_dst_usb_out_state_z_ez0_bit_pos        1
  64      =1  //#define merger_dst_out1_state_z_ez0_bit_pos           0
  65      =1  
  66      =1  #ifdef Z8_COMPIL
           =1 #define filter_state_z_ez0                                      (1<<filter_state_z_ez0_bit_pos)                         // on/off
           =1 // #define 
           =1 #define filter_type_z_ez0                                       (1<<filter_type_z_ez0_bit_pos)                          // 1=filter all, 0=filter realtime
           =1 #define midi_thru_ez0                                           (1<<midi_thru_ez0_bit_pos)      // on/off
           =1 //#define merger_src_midi_in_state_z_ez0        (1<<merger_src_midi_in_state_z_ez0_bit_pos)     // on/off
           =1 //#define merger_src_usb_in_state_z_ez0         (1<<merger_src_usb_in_state_z_ez0_bit_pos)      // on/off
           =1 //#define merger_dst_usb_out_state_z_ez0        (1<<merger_dst_usb_out_state_z_ez0_bit_pos)     // on/off
           =1 //#define merger_dst_out1_state_z_ez0           (1<<merger_dst_out1_state_z_ez0_bit_pos)        // on/off
           =1 #endif
  76      =1  
  77      =1  #ifdef EZ_COMPIL
  78      =1  #define filter_state_z_ez0                                      (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ filter_state_z_ez0
             -_bit_pos)
  79      =1  // #define 
  80      =1  #define filter_type_z_ez0                                       (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ filter_type_z_ez0_b
             -it_pos)
  81      =1  #define midi_thru_ez0                                           (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ midi_thru_ez0_bit_pos)
  82      =1  //#define merger_src_midi_in_state_z_ez0        (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ merger_
             -src_midi_in_state_z_ez0_bit_pos)
  83      =1  //#define merger_src_usb_in_state_z_ez0         (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ merger_s
             -rc_usb_in_state_z_ez0_bit_pos)
  84      =1  //#define merger_dst_usb_out_state_z_ez0        (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ merger_d
             -st_usb_out_state_z_ez0_bit_pos)
  85      =1  //#define merger_dst_out1_state_z_ez0           (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_0_7BITS_TO_EZ_INDEX] ^ merger_dst
             -_out1_state_z_ez0_bit_pos)
  86      =1  #endif
  87      =1  
  88      =1  
  89      =1  // CTRL_REG_1_7BITS_TO_EZ bits definition (MUST BE LOADED From NVM AT STARTUP, MUST BE SENT TO EZBOARD)
  90      =1  // Bit 7 must be 0 since this control reg is sent to EZBOARD
  91      =1  #define ez_fw_midi_to_z8_z_ez1_bit_pos          4       // V1.5 ; z8 indicates to EZ it must receive midi events
  92      =1  #define realtime_source_int_z_ez1_bit_pos       1       // DO NOT CHANGE ORDER
  93      =1  #define realtime_source_ext_z_ez1_bit_pos       0       // DO NOT CHANGE ORDER
  94      =1  #define REALTIME_SRC_MSK        0x03                            // Midi in, Usb in, internal
  95      =1  
  96      =1  #ifdef Z8_COMPIL
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 20  

           =1 #define ez_fw_midi_to_z8_z_ez1                          (1<<ez_fw_midi_to_z8_z_ez1_bit_pos)             // on/off
           =1 #define realtime_source_int_z_ez1                       (1<<realtime_source_int_z_ez1_bit_pos)  // 0=internal 0ff, 1=internal o
             -n 
           =1 #define realtime_source_ext_z_ez1                       (1<<realtime_source_ext_z_ez1_bit_pos)  // 0=midi in, 1=usb in (externa
             -l sync input)
           =1 #endif
 101      =1  
 102      =1  #ifdef EZ_COMPIL
 103      =1  #define ez_fw_midi_to_z8_z_ez1                          (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_1_7BITS_TO_EZ_INDEX] ^ ez_fw_midi_to_z
             -8_z_ez1_bit_pos)
 104      =1  #define realtime_source_int_z_ez1                       (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_1_7BITS_TO_EZ_INDEX] ^ realtime_sour
             -ce_int_z_ez1_bit_pos)
 105      =1  #define realtime_source_ext_z_ez1                       (CTRL_REGS_7BITS_FROM_Z8[CTRL_REG_1_7BITS_TO_EZ_INDEX] ^ realtime_sour
             -ce_ext_z_ez1_bit_pos)
 106      =1  #endif
 107      =1  
 108      =1  // LAST_CTRL_REG_7BITS_TO_EZ_INDEX bits definition (MUST BE LOADED From NVM AT STARTUP, MUST BE SENT TO EZ
             -BOARD)
 109      =1  // Bit 7 must be 0 since this control reg is sent to EZBOARD
 110      =1  //#define ez_board_fully_updated_ezlast         (1<<6)  // 1 when all regs dedicated to EZ have been sent
 111      =1  // or
 112      =1  #define EZ_FULLY_UPDATED        0x55U
 113      =1  
 114      =1  ////////////////////////////////////////////////////////////////////////////////////////////////////////
 115      =1  // MISC REGISTERS (PARTIALY) USED BY EZ BOARD, NOT TO SEND (COMMON DEF ONLY)
 116      =1  ////////////////////////////////////////////////////////////////////////////////////////////////////////
 117      =1  
 118      =1  // Z8_STATUS_8 bits definition
 119      =1  #define onewire_rx_overflow_z8                  (1<<5)  // 0 =no overflow               DO NOT CHANGE ORDER
 120      =1  #define serial_in_overflow_z8                   (1<<4)  // 0 =no overflow               DO NOT CHANGE ORDER
 121      =1  #define midi_in_realtime_overflow_z8    (1<<3)  // 0 =no overflow               DO NOT CHANGE ORDER
 122      =1  #define usb_in_realtime_overflow_z8             (1<<2)  // 0 =no overflow               DO NOT CHANGE ORDER
 123      =1  #define midi_in_overflow_z8                             (1<<1)  // 0 =no overflow               DO NOT CHANGE ORDER
 124      =1  #define usb_in_overflow_z8                              (1<<0)  // 0 =no overflow               DO NOT CHANGE ORDER
 125      =1  
 126      =1  #define OVERFLOW_MSK                                    0x3FU   // mask bits 0-5
 127      =1  #define OVERFLOW_FROM_EZ_MSK                    0x0FU   // mask bits 0-3 (only overflows from EZ board)
 128      =1  #define OVERFLOW_REALTIME_MSK                   0x0CU   // mask bits 3-2
 129      =1  #define OVERFLOW_INPUT_MSK                              0x03U   // mask bits 1-0
 130      =1  #define OVERFLOW_FROM_MIDI_MSK                  0x0AU   // mask bits 1 and 3
 131      =1  #define OVERFLOW_FROM_USB_MSK                   0x05U   // mask bits 0 and 2
 132      =1  
 133      =1  //////////////////////////////////////////////////////////
 134      =1  // Z8 TO EZ (only) COMMUNICATION PROTOCOL ////////////////
 135      =1  //////////////////////////////////////////////////////////
 136      =1  #define SOF_TO_EZ                                               0xFFU
 137      =1  #define FRAME_FROM_Z8_TO_EZ_TYPE_MSK    0x60U   // Bits 6-5 : data type (reg/midi)
 138      =1  #define FRAME_TO_EZ_IS_MIDI                             0x20U
 139      =1  #define FRAME_TO_EZ_IS_CTRL_REG                 0x00U
 140      =1  #define EOF_TO_EZ                                               0xFEU
 141      =1  
 142      =1  // frame from z8 to ez status byte bits definition
 143      =1  // bit 7 is always 0                                    //  bit 7 : always 0
 144      =1  // bits 6:5                                                     // frame type 00=ctrl_reg 01=midi 
 145      =1  #define send_to_usb                     (1 << 4)        // bit 4        // reg address or send to usb
 146      =1  #define send_to_out1            (1 << 3)        // bit 3        // reg address or send to out 0
 147      =1  #define send_to_out2            (1 << 2)        // bit 2        // reg address or send to out 1
 148      =1  // bits 1:0                                                             // bits 1:0     // reg address or rfu
 149      =1  
 150      =1  #define CTRL_REG_Z8_TO_EZ_ADDR_MSK              0x1F
 151      =1  
 152      =1  //////////////////////////////////////////////////////////
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 21  

 153      =1  // EZ TO Z8 (only) COMMUNICATION PROTOCOL ////////////////
 154      =1  //////////////////////////////////////////////////////////
 155      =1  
 156      =1  #define CTRL_REG_MAX_FROM_EZ_TO_Z8              1U              // Nb of registers updated to the Z8 board
 157      =1  
 158      =1  // CTRL_REG_0_7BITS_FROM_EZ bits definition : TOGGLE REGISTER
 159      =1  // the following bits def MUST be duplicated in main.c from EZ project file
 160      =1  //  bit 7 is always 0                                                   //  bit 7 : always 0
 161      =1  #define usb_state_from_ez0_bit_pos                                      6
 162      =1  #define z8_board_fully_updated_from_ez0_bit_pos         5
 163      =1  #define must_start_bootloader_from_ez0_bit_pos          4
 164      =1  #define usb_enumrated_from_ez0_bit_pos                          3
 165      =1  
 166      =1  #ifdef Z8_COMPIL
           =1 #define usb_state_from_ez0                                      (1<<usb_state_from_ez0_bit_pos) // 0=midi in, 1=usb in
           =1 #define z8_board_fully_updated_from_ez0         (1<<z8_board_fully_updated_from_ez0_bit_pos)    // on/off
           =1 #define must_start_bootloader_from_ez0          (1<<must_start_bootloader_from_ez0_bit_pos)     // on/off
           =1 #define usb_enumrated_from_ez0                          (1<<usb_enumrated_from_ez0_bit_pos)     // on/off
           =1 #endif
 172      =1  
 173      =1  #ifdef EZ_COMPIL
 174      =1  #define usb_state_from_ez0                                      (CTRL_REGS_7BITS_TO_Z8[0] ^ usb_state_from_ez0_bit_pos)
 175      =1  #define z8_board_fully_updated_from_ez0         (CTRL_REGS_7BITS_TO_Z8[0] ^ z8_board_fully_updated_from_ez0_bit_
             -pos)
 176      =1  #define must_start_bootloader_from_ez0          (CTRL_REGS_7BITS_TO_Z8[0] ^ must_start_bootloader_from_ez0_bit_pos
             -)
 177      =1  #define usb_enumrated_from_ez0                          (CTRL_REGS_7BITS_TO_Z8[0] ^ usb_enumrated_from_ez0_bit_pos)
 178      =1  #endif
 179      =1  
 180      =1  // SYSEX ID0 (BYTE 6)   
 181      =1  //  bit 7 is always 0                                                   //  bit 7 : always 0
 182      =1  #define sysex_direction_sysxid0                 (1<<6U) //  bit 6 :                                                     0=received sysex, 1=sent sysex
 183      =1  #define prog_upload_sysxid0                             (1<<5U) //      bit 5 : program or upload request       0=program request/answer 1=upl
             -oad request/answer
 184      =1  #define prog_ez_z8_sysxid0                              (1<<5U) //      bit 5 : 0= program ez firmware 1= program z8 firmware 
 185      =1  #define pure_midi_from_usb_sysxid0              (1<<5U) //      bit 5 : 0= pure midi from MIDI in conn 1= pure Midi from US
             -B in (V1.5)
 186      =1  #define acknoledge_sysxid0                              (1<<4U) //      bit 4 : ack request/answer                      0=no ack required/prog error  1=ack 
             -required/prog succeeded
 187      =1  #define checksum_check_sysxid0                  (1<<3U) //      bit 3 : checksum check request          0=no checksum to check  1=must
             - check embedeed checksum (calculated from SYSEX ID2 to checksum)
 188      =1  //#define checksum_return_sysxid0               (1<<2U) //      bit 2 : checksum return request         0=checksum return is not re
             -quested 1:checksum return is requested 
 189      =1  #define fw_znext_finish_sysxid0                 (1<<2U) //      bit 2 : 0= next firmware data available / 1=finish programmin
             -g firmware
 190      =1  // bits 1:0 : frame type content                                //  00=common parameter 01=lcd control assign   // DO NOT CHANGE ORDER
 191      =1                                                                                                  //  10=firmware or midi 11=midi control assign  // DO NOT CHANGE ORDER
 192      =1  #define FRAME_TO_Z8_TYPE_MSK                    0x03U   //      sysex content 
 193      =1                                                  
 194      =1  //v1.1 enum { FRAME_IS_COMMON_PARAM, FRAME_IS_LCD_CTRL_ASSIGN, FRAME_IS_FIRMWARE, FRAME_IS_MIDI_CTRL_ASSIG
             -N, FRAME_IS_PURE_MIDI};
 195      =1  enum { FRAME_IS_COMMON_PARAM, FRAME_IS_LCD_CTRL_ASSIGN, FRAME_IS_FIRMWARE_OR_PURE_MIDI, FRAME_IS_MIDI_CTRL
             -_ASSIGN};
 196      =1  
 197      =1  // Addresses of common parameters uploaded/programmed from EZ board or external sysex
 198      =1  enum {  // then with NVM regs dedicated to EZ board
 199      =1                  CTRL_REG_0_7BITS_TO_EZ_INDEX, CTRL_REG_1_7BITS_TO_EZ_INDEX, 
 200      =1                  LAST_CTRL_REG_7BITS_TO_EZ_INDEX,
 201      =1                  // continue with NVM regs dedicated to Z8 only
 202      =1                  Z8_STATUS_0_NVM_INDEX, Z8_STATUS_1_NVM_INDEX, CHANNEL_INDEX, GROUP_INDEX, INT_TEMPO_INDEX, 
 203      =1          // the following regs cannot be accessed (from EZ board only)
 204      =1          CTRL_REG_0_7B_FROM_EZ_INDEX, LCD_MESSAGE_TO_Z8_INDEX };
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 22  

 205      =1  
 206      =1  #define IDENTITY_REQUEST_INDEX 0x7F
 207      =1  
 208      =1  // first index of NVM registers dedicated to EZ
 209      =1  #define CTRL_REG_TO_EZ_START_INDEX       CTRL_REG_0_7BITS_TO_EZ_INDEX   
 210      =1  // last index of NVM register that can be programmed by external sysex
 211      =1  
 212      =1  // last index of NVM register that can be programmed by external sysex or EZ board
 213      =1  #define LAST_COMMON_PARAM_INDEX      LCD_MESSAGE_TO_Z8_INDEX
 214      =1  // Nb of registers updated from the Z8 board
 215      =1  #define CTRL_REG_NB_FROM_Z8_TO_EZ        (LAST_CTRL_REG_7BITS_TO_EZ_INDEX-CTRL_REG_0_7BITS_TO_EZ_INDEX+1)               
 216      =1  
 217      =1  //SYSEX ID3 (BYTE 8)    
 218      =1  //  bit 7               : always 0
 219      =1  //      bits 6:0        : group or address      : control assign group GG
 220      =1   
 221      =1  // JLABS SYSEX header from MMA
 222      =1  #define JLABS_SYX_ID0                           0x00U
 223      =1  #define JLABS_SYX_ID1                           0x20U
 224      =1  #define JLABS_SYX_ID2                           0x4FU
 225      =1  #define JLABS_SYX_ID3                           0x00U
 226      =1  #define JLABS_SYX_ID4                           0x01U
 227      =1  
 228      =1  #define MIDI_PROGRAM_CHANGE                     0xC0U
 229      =1  #define MIDI_CONTROL_CHANGE                     0xB0U
 230      =1  #define MIDI_PITCH_WHEEL                        0xE0U
 231      =1  #define MIDI_CHANN_PRESSURE                     0xD0U
 232      =1  #define MIDI_NOTE_ON                            0x90U
 233      =1  #define MIDI_NOTE_OFF                           0x80U
 234      =1  #define MIDI_MMC_PAUSE                          0x09U
 235      =1  #define MIDI_MMC_BACKWARD                       0x05U
 236      =1  #define MIDI_MMC_FORWARD                        0x04U
 237      =1  #define MIDI_MMC_PLAY                           0x02U
 238      =1  #define MIDI_MMC_STOP                           0x01U
 239      =1  #define MIDI_MMC_REC                            0x06U
 240      =1  #define MIDI_CLOCK                                      0xF8U
 241      =1  #define MIDI_TICK                                       0xF9U
 242      =1  #define MIDI_START                                      0xFAU
 243      =1  #define MIDI_CONTINUE                           0xFBU
 244      =1  #define MIDI_STOP                                       0xFCU
 245      =1  #define MIDI_SOX                                        0xF0U
 246      =1  #define MIDI_EOX                                        0xF7U
 247      =1  #define MIDI_ACTIVE_SENSE                       0xFEU   // never received, filtered by EZ board
 248      =1  #define MIDI_TIME_CODE                          0xF1U
 249      =1  #define MIDI_SONG_POSITION_POINTER      0xF2U
 250      =1  #define MIDI_SONG_SELECTED                      0xF3U
 251      =1  #define MIDI_STATUS_MASK                        0x80U
 252      =1  
 253      =1  #define JLABS_SYX_HEADER_SIZE                   6U                                                              // f0 00 20 4f 00 01 
 254      =1  #define JLABS_SYX_UPLOAD_HEADER_SIZE    (JLABS_SYX_HEADER_SIZE + 4U)    // f0 00 20 4f 00 01 UL LL GG NN 
 255      =1  
 256      =1  #define DATA_LENGHT_START_BOOTLOADER    0x7F
 257      =1  #define Z8_ERASING_TIME                                 4000
 258      =1  #define EE_24C64_PAGE_LENGHT                    32
 259      =1  #define EE24C64_SIZE                                    16384
 260      =1  
 261      =1  #define MAX_LCD_TEXT_LENGHT                     (16U + 1U)              // 16 chars + eoc
 262      =1  
 263      =1  
 264      =1  #define DEFAULT_INTERNAL_TEMPO          100 // 30 will be added : 130
 265      =1  #define MAX_REAL_TEMPO                          255
 266      =1  #define TEMPO_ADD_OFFSET                        30
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 23  

 267      =1  
 268      =1  #endif
  11          #include "pins_def.h"
   1      =1  #ifndef PINS_DEF_H              //Header sentry
   2      =1  #define PINS_DEF_H
   3      =1  
   4      =1  // PINS FUNCTIONS DEFINITIONS
   5      =1  
   6      =1  // PORT BIT DEFINITIONS : OUTPUTS
   7      =1  //#define USB_LED_PORT_OUT              OUTB    // USB Led output pin
   8      =1  //#define USB_LED_PIN                   bmBIT6  // USB Led
   9      =1  #define Z8_RESET_PORT_OUT               IOE             // Reset control of Z8 board
  10      =1  #define Z8_RESET_PIN                    bmBIT1  // Reset control of Z8 board
  11      =1  #define OCD_EN_PORT_OUT                 IOE             // OCD Enable output port
  12      =1  #define OCD_EN_PIN                              bmBIT0  // OCD Enable output pin
  13      =1  #define FORCE_OCD_Z8_PORT_OUT   IOE             // Reset control of Z8 board
  14      =1  #define FORCE_OCD_Z8_PIN                bmBIT3  // Reset control of Z8 board
  15      =1  
  16      =1  // PORT BIT DEFINITIONS : INPUTS
  17      =1  #define VUSB_PORT_IN                    IOE             // usb power supply monitor input port
  18      =1  #define VUSB_PIN                                bmBIT2  // usb power supply monitor input pin
  19      =1  
  20      =1  
  21      =1  // OPTIONAL PINS ACTUALLY NOT USED
  22      =1  
  23      =1  
  24      =1  #endif
  25      =1  
  26      =1  
  27      =1  
  28      =1  
  29      =1  
  12          #include "periph.h"
   1      =1  #ifndef PERIPH_H                //Header sentry
   2      =1  #define PERIPH_H
   3      =1  
   4      =1  BOOL TD_Resume(void);                   // Called after the device resumes
   5      =1  void TD_Init(void);
   6      =1  
   7      =1  #endif
   8      =1  
  13          #include "bootloader.h"
   1      =1  #ifndef BOOTLOADER_H            //Header sentry
   2      =1  #define BOOTLOADER_H
   3      =1  
   4      =1  enum { BOOTLOADER_OFF, SEND_IDENTITY_SYSEX, WAIT_EZ_FW_DATA, WAIT_Z8_FW_DATA, TERMINATE_FW_UPGRADE/*, VERI
             -FY_Z8_CRC */};
   5      =1  
   6      =1  // Z8 ENCORE ON CHIP DEBUGGER DEFINITION
   7      =1  #define OCD_FIRST_BYTE                          0x80    // used to autodetect ocd bit rate
   8      =1  //ocd commands
   9      =1  #define OCD_WRITE_PRG_MEM_CMD           0x0A    // 
  10      =1  #define OCD_READ_PRG_MEM_CMD            0x0B    // V1.4
  11      =1  #define OCD_WRITE_CTR_REG_CMD           0x04    // 
  12      =1  #define OCD_WRITE_REG_CMD                       0x08
  13      =1  #define OCD_READ_FLASH_CRC                      0x0E
  14      =1  // ocd datas
  15      =1  #define OCD_FLASH_FIRST_UNLOCK          0x73
  16      =1  #define OCD_FLASH_SECOND_UNLOCK         0x8C
  17      =1  #define OCD_FLASH_MASS_ERASE            0x63
  18      =1  #define OCD_FLASH_CTR_REG_RESET         0x00
  19      =1  #define OCD_CTR_REG_DBGMODE                     0x81
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 24  

  20      =1  // registers addresses
  21      =1  #define OCD_OPTION_REG_ADD                      0x0000
  22      =1  #define OCD_FLASH_CTR_REG_ADD           0x0FF8
  23      =1  #define OCD_FLASH_FREQ_REG_HIGH_ADD     0x0FFA
  24      =1  #define OCD_FLASH_FREQ_REG_LOW_ADD      0x0FFB
  25      =1  #define OCD_FLASH_SELECT_PAGE           0x0FF9
  26      =1                  
  27      =1  #define OCD_Z8_FLASH_FREQ_REG   (Z8_FREQ / 1000)
  28      =1  
  29      =1  #define I2C_EE_HH_ADDR                  0x01
  30      =1  #define SERIAL_ADDR                             0x50
  31      =1  #define I2C_Addr                                (SERIAL_ADDR | I2C_EE_HH_ADDR)  
  32      =1  #define FW_SYSX_DATA_START              11              // f0 00 20 4f 00 01 ss ll aa aa aa  
  33      =1  
  34      =1  //#define fw_checksum                   sync24_clear_clock_cpt
  35      =1  //#define fw_bl_src                             sync24_clear_cont_cpt
  36      =1  
  37      =1  enum { FW_BL_SRC_UNKNOWN, FW_BL_SRC_MIDI_IN, FW_BL_SRC_USB_IN };
  38      =1  
  39      =1  // BOOTLOADER SYSEX DEFINITION
  40      =1  
  41      =1  
  42      =1  // FUNCTIONS PROTOTYPES
  43      =1  //void SoftReset(void);
  44      =1  void Check_Bootloader(void);
  45      =1  void SendIdentityBootLoader(void);
  46      =1  void SendFwAcknoledge(unsigned char result);
  47      =1  void AssignJlabsSysexHeader(void);
  48      =1  void SendDispatchFwSysex(void);
  49      =1  void WaitNextBootLoaderState(unsigned char awaited_state);
  50      =1  void DecodeFirmwareSysex(Midi_In_Struct *midi_struct);
  51      =1  //void EEPROMWriteByte(WORD addr, BYTE value);
  52      =1  BYTE EEPROMWriteVerify(WORD addr, BYTE length, BYTE xdata *buf); //, BYTE buffer_max_length); //TPM EEPROM
             - Write
  53      =1  void WriteSingleRegOCD(WORD address, BYTE value);
  54      =1  void InitFlashFrqAndUnlock(void);
  55      =1  
  56      =1  #endif
  57      =1  
  14          #include "serial.h"
   1      =1  #ifndef SERIAL_H                //Header sentry
   2      =1  #define SERIAL_H
   3      =1  
   4      =1  #define Z8_MEM_SIZE                                     65536
   5      =1  #define EZUSB_MEM_SIZE                          8192
   6      =1  
   7      =1  #define XTAL                                            48000000L       // in hertz
   8      =1  #define MIDI_OUT_1_BAUD_RATE            31250L          // in bauds
   9      =1  
  10      =1  #define MIDI_OUT_1_BAUD_RELOAD                  (65536-(XTAL/(32L*MIDI_OUT_1_BAUD_RATE)))       // timer 2
  11      =1  #define SERIAL_TO_Z8_BAUD_RELOAD                ((2*XTAL)/(32*12*BAUD_Z8_EZ))   // timer 1
  12      =1  #define SERIAL_TO_OCD_Z8_BAUD_RELOAD    ((2*XTAL)/(32*12*BAUD_OCD_Z8_EZ))       // timer 1 (ON CHIP DEBUGGER Z8)
  13      =1  
  14      =1  
  15      =1  #define TIMER0_PERIOD                           2 // in milliseconds
  16      =1  #define TIMER0_RELOAD                           (65536-(((XTAL*TIMER0_PERIOD)/(12*1000L))))
  17      =1  
  18      =1  #define SERIAL_TX_BUFF_LENGTH           32 // used as a buffer for MIDI outputs
  19      =1  
  20      =1  enum {WAIT_SOF, FRAME_STATUS_BYTE, WAIT_EOF }; // Frame state from Z8 serial
  21      =1  enum {WAIT_FOR_CORRECT_DATA, IN_SYSEX, SYSEX_RECEIVED, NORMAL, FIFO_FULL }; // MIDI Merger State Byte
  22      =1  enum {CN0, CN1 };        // USB MIDI CABLE NUMBER
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 25  

  23      =1  enum {SERIAL, USB }; // Bootloader source port
  24      =1  
  25      =1  #define CTRL_REG_Z8_FRAME_LENGHT                0x04 // FF SS VV FE FF SS VV FE
  26      =1  
  27      =1  // jlabs MAWZER RECOGNIZED SYSEXS (RECEIVED BY MAWZER)
  28      =1  
  29      =1  // jlabs MAWZER RECOGNIZED SYSEXS (SENT BY MAWZER)
  30      =1  
  31      =1  
  32      =1  // FUNCTION PROTOTYPES
  33      =1  void Init_Serial_Ports(void);
  34      =1  void Send_To_Midi_Out_Con(BYTE data_to_send);
  35      =1  void Check_MIDI_Buff_Send_To_Z8_Board(Midi_In_Struct *midi_struct, BYTE end_index_local);
  36      =1  void Send_To_Serial_Z8(BYTE data_to_send);
  37      =1  void Send_Single_Framed_byte_To_Z8(/*v1.1 BYTE SYSEX_ID0,*/ BYTE SYSEX_ID2, BYTE byte_to_send);
  38      =1  
  39      =1  #endif // SERIAL_H
  15          #include "hardware.h"
   1      =1  #ifndef HARDWARE_H              //Header sentry
   2      =1  #define HARDWARE_H
   3      =1  
   4      =1  // DEFINES
   5      =1  #define USB_LED_PERSISTENCY             10      // in multiple of 2ms
   6      =1  
   7      =1  // PROTOTYPING
   8      =1  void Init_Variables(void);
   9      =1  void Init_IOs(void);
  10      =1  void SyncToZ8Board(void);
  11      =1  //void Check_InitialSwitchesState(void);
  12      =1  
  13      =1  #endif
  16          #include "usb.h"
   1      =1  #ifndef USB_H           //Header sentry
   2      =1  #define USB_H
   3      =1  
   4      =1  
   5      =1  
   6      =1  // PROTOTYPES
   7      =1  void Check_If_Usb_Attached(void);
   8      =1  void Check_Usb(void);
   9      =1  void Create_Send_USB_Frame_From_MIDI_Buffer( BYTE CN, Midi_In_Struct *midi_struct, BYTE end_index_local);
  10      =1  void Create_Send_Realtime_USB_Frame_From_MIDI_Buffer( BYTE CN, BYTE realtime_data);
  11      =1  void Ep2out_Function(void);
  12      =1  #endif
  17          
  18          volatile BYTE bootloader_state;
  19          bit must_program_z8;
  20          
  21          // BYTE I2C_Addr;
  22          
  23          // FROM MAIN.C
  24          extern bit usb_state_from_ez0_bit;
  25          extern bit z8_board_fully_updated_from_ez0_bit;
  26          extern xdata Midi_In_Struct  MIDI_In_From_Con, MIDI_In_From_Usb, Serial_In_From_Z8;
  27          //BYTE fw_checksum;
  28          BYTE fw_bl_src;
  29          
  30          // FROM IDENTITY.C
  31          extern unsigned char code identity[];
  32          
  33          // V1.4 FROM SERIAL.C
  34          extern bit tx_to_serial_z8_busy;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 26  

  35          
  36          
  37          /* ******************************************************************** */
  38          /* Routine: SoftReset()                                                                                                 */
  39          /* Process:                                                                                                                     */
  40          /* Inputs:      None                                                                                                            */
  41          /* Outputs:     None                                                                                                            */
  42          /* ******************************************************************** */
  43          //void SoftReset(void)
  44          //{
  45          //      ((void (code *) (void)) 0x0000) ();
  46          //}
  47          
  48          /* ******************************************************************** */
  49          /* Routine: Check_Bootloader                                                                                    */
  50          /* Process:                                                                                                                     */
  51          /* Inputs:      None                                                                                                            */
  52          /* Outputs:     None                                                                                                            */
  53          /* ******************************************************************** */
  54          void Check_Bootloader(void)
  55          {
  56   1                      // reinit all chip
  57   1                      TD_Init();
  58   1                      // just to allow send/receive from midi and usb inputs
  59   1                      z8_board_fully_updated_from_ez0_bit = 1;
  60   1                      // Init i2c bus for eeprom ez upgrade
  61   1                      //EZUSB_InitI2C();
  62   1                      // update bootloading flags and state
  63   1                      bootloader_state = SEND_IDENTITY_SYSEX;                 
  64   1      
  65   1                      // First send the Bootloader identity sysex acknoledge to midi & usb out
  66   1                      SendIdentityBootLoader();
  67   1      
  68   1                      must_program_z8 = FALSE;
  69   1      
  70   1                      // The data firmware upgrade starts here
  71   1                      bootloader_state = WAIT_EZ_FW_DATA;                             
  72   1                      // Now Wait for the ez firmware data sysexs
  73   1                      WaitNextBootLoaderState(bootloader_state);
  74   1      
  75   1                      if(must_program_z8)
  76   1                      {
  77   2                              // Release Z8 board reset line
  78   2                              Z8_RESET_PORT_OUT |=  Z8_RESET_PIN;
  79   2                              // wait por
  80   2                              EZUSB_Delay(200);
  81   2      
  82   2                              // disable rx1
  83   2                              SCON1 = 0x40;           /* SCON1: mode 1, 8-bit UART, disable rcvr  */
  84   2      
  85   2                              // tx1 is now dedicated to z8 dbg pin
  86   2                              OCD_EN_PORT_OUT |= OCD_EN_PIN;
  87   2      
  88   2                              // set z8 dbg pin low
  89   2                              FORCE_OCD_Z8_PORT_OUT &= ~FORCE_OCD_Z8_PIN;
  90   2      
  91   2                              // wait 2sec
  92   2                              EZUSB_Delay(2000);
  93   2      
  94   2                              // set z8 dbg pin high
  95   2                              FORCE_OCD_Z8_PORT_OUT |= FORCE_OCD_Z8_PIN;
  96   2                              
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 27  

  97   2                              // turn on tx1 and rx1 (serial to/from z8)
  98   2      //                      PORTBCFG |= 0x0C;
  99   2      
 100   2                              // send ocd first byte so the z8 autobaudrate the serial line
 101   2                              Send_To_Serial_Z8(OCD_FIRST_BYTE);
 102   2                              EZUSB_Delay1ms();
 103   2      
 104   2                              // place the z8 chip in ocd mode
 105   2                              Send_To_Serial_Z8(OCD_WRITE_CTR_REG_CMD);
 106   2                              Send_To_Serial_Z8(OCD_CTR_REG_DBGMODE);
 107   2                              EZUSB_Delay(100);
 108   2      
 109   2                              InitFlashFrqAndUnlock();
 110   2      
 111   2                              // selet flash page 0
 112   2                              WriteSingleRegOCD(OCD_FLASH_SELECT_PAGE, 0x00);
 113   2      
 114   2                              // launch a mass erase
 115   2                              WriteSingleRegOCD(OCD_FLASH_CTR_REG_ADD, OCD_FLASH_MASS_ERASE);
 116   2                              
 117   2                              EZUSB_Delay(Z8_ERASING_TIME);
 118   2      
 119   2                              InitFlashFrqAndUnlock();
 120   2                      
 121   2                              // Now Wait for the z8 firmware data sysexs
 122   2                              WaitNextBootLoaderState(bootloader_state);
 123   2      
 124   2                              EZUSB_Delay(50);
 125   2      
 126   2                              // relock the flash controller
 127   2                              WriteSingleRegOCD(OCD_FLASH_CTR_REG_ADD, OCD_FLASH_CTR_REG_RESET);
 128   2                                              
 129   2                              // exit z8 ocd mode
 130   2                              OCD_EN_PORT_OUT   &=  ~OCD_EN_PIN;
 131   2      
 132   2                              // exit z8 ocd mode
 133   2                              Z8_RESET_PORT_OUT &=  ~Z8_RESET_PIN;
 134   2                      }
 135   1      
 136   1              // Now finish with a soft reset
 137   1              // SoftReset();
 138   1              while(1)
 139   1              { 
 140   2                      Check_Usb();
 141   2                      Ep2out_Function();
 142   2              }
 143   1      }
 144          
 145          // ***************************************************************************
 146          // Routine      : SendIdentityBootLoader()
 147          // Input        : 
 148          // Output       : None
 149          // Process      : send all 11 identity bytes to usb & midi out 1, 
 150          //            we dont know yet what is the bootloader midi source : use the Z8 input buffer 
 151          // ***************************************************************************
 152          void SendIdentityBootLoader(void)
 153          {
 154   1        unsigned char i;
 155   1       
 156   1        //Serial_In_From_Z8.start_index = 0;
 157   1        Serial_In_From_Z8.end_index   = JLABS_SYX_HEADER_SIZE + 4 + IDENTITY_LENGHT + 1;
 158   1       
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 28  

 159   1        AssignJlabsSysexHeader();
 160   1      
 161   1        // send identity common param id and address
 162   1        Serial_In_From_Z8.buffer[6]   = FRAME_IS_COMMON_PARAM | sysex_direction_sysxid0 | prog_upload_sysxid0;
 163   1      
 164   1        // Send length common param address
 165   1        Serial_In_From_Z8.buffer[7]   = IDENTITY_LENGHT;
 166   1        // Send IDENTITY common param address  
 167   1        Serial_In_From_Z8.buffer[8]   = IDENTITY_REQUEST_INDEX;
 168   1        // Send group : dummy byte here  
 169   1        Serial_In_From_Z8.buffer[9]   = 0;
 170   1        // send identity bytes
 171   1        for(i=0; i<IDENTITY_LENGHT ; i++)
 172   1              Serial_In_From_Z8.buffer[10+i] = identity[i];
 173   1        // send eox
 174   1        Serial_In_From_Z8.buffer[21]   = MIDI_EOX;
 175   1        
 176   1        SendDispatchFwSysex();
 177   1      }
 178          
 179          // ***************************************************************************
 180          // Routine      : SendFwAcknoledge()
 181          // Input        : 
 182          // Output       : None
 183          // Process      : send single byte ack to usb & midi out 1, use the Z8 input buffer 
 184          // ***************************************************************************
 185          void SendFwAcknoledge(unsigned char result)
 186          {
 187   1      
 188   1        //Serial_In_From_Z8.start_index = 0;
 189   1        Serial_In_From_Z8.end_index   = JLABS_SYX_HEADER_SIZE + 1 + 1;
 190   1        
 191   1        AssignJlabsSysexHeader();
 192   1      
 193   1        // send ack firmware 
 194   1        Serial_In_From_Z8.buffer[6]   = /*v1.1 FRAME_IS_FIRMWARE*/FRAME_IS_FIRMWARE_OR_PURE_MIDI | sysex_directi
             -on_sysxid0 | prog_upload_sysxid0 | result;
 195   1        
 196   1        // send eox
 197   1        Serial_In_From_Z8.buffer[7]   = MIDI_EOX;
 198   1      
 199   1        SendDispatchFwSysex();
 200   1        
 201   1      }
 202          
 203          // ***************************************************************************
 204          // Routine      : AssignJlabsSysexHeader()
 205          // Input        : 
 206          // Output       : None
 207          // Process      : 
 208          // ***************************************************************************
 209          void AssignJlabsSysexHeader(void)
 210          {
 211   1              // send Jlabs sysex header  
 212   1              Serial_In_From_Z8.buffer[0]   = MIDI_SOX;
 213   1              Serial_In_From_Z8.buffer[1]   = JLABS_SYX_ID0;
 214   1              Serial_In_From_Z8.buffer[2]   = JLABS_SYX_ID1;
 215   1              Serial_In_From_Z8.buffer[3]   = JLABS_SYX_ID2;
 216   1              Serial_In_From_Z8.buffer[4]   = JLABS_SYX_ID3;
 217   1              Serial_In_From_Z8.buffer[5]   = JLABS_SYX_ID4;
 218   1      }
 219          
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 29  

 220          // ***************************************************************************
 221          // Routine      : SendDispatchFwSysex()
 222          // Input        : 
 223          // Output       : None
 224          // Process      : optimize by grouping with same fct from main.c
 225          // ***************************************************************************
 226          void SendDispatchFwSysex(void)
 227          {
 228   1              // BYTE start_index_local = Serial_In_From_Z8.start_index;
 229   1              BYTE start_index_local = 0;
 230   1      
 231   1              // Send all bytes to MIDI Out Connector
 232   1              if(fw_bl_src != FW_BL_SRC_USB_IN)
 233   1              {
 234   2                      while (start_index_local != Serial_In_From_Z8.end_index)
 235   2                      {
 236   3                              Send_To_Midi_Out_Con(Serial_In_From_Z8.buffer[start_index_local]);
 237   3                              start_index_local++; // no need to modulo since always start from 0
 238   3                      }
 239   2              }
 240   1      
 241   1              // Also send to usb if present
 242   1              if(fw_bl_src  != FW_BL_SRC_MIDI_IN)
 243   1              if(usb_state_from_ez0_bit)
 244   1              {
 245   2                      Serial_In_From_Z8.start_index   = 0;
 246   2                      // Send all bytes to USB Out 
 247   2                      Create_Send_USB_Frame_From_MIDI_Buffer(CN0, &Serial_In_From_Z8, Serial_In_From_Z8.end_index);
 248   2              }
 249   1      
 250   1              // V1.4
 251   1              Serial_In_From_Z8.start_index           = 0;
 252   1              Serial_In_From_Z8.end_index             = 0;
 253   1              Serial_In_From_Z8.current_index         = 0;
 254   1      }
 255          
 256          // ***************************************************************************
 257          // Routine      : WaitNextBootLoaderState()
 258          // Input        : 
 259          // Output       : None
 260          // Process      : loop until received sysex is the one awaited
 261          // ***************************************************************************
 262          void WaitNextBootLoaderState(unsigned char current_state)
 263          {
 264   1              // Loop until receiving expected firmware sysex 
 265   1              do
 266   1              {
 267   2                      Check_If_Usb_Attached();                
 268   2                      Check_Usb();
 269   2      
 270   2                      // bootloader source not yet known or midi in ?
 271   2                      if(fw_bl_src != FW_BL_SRC_USB_IN)
 272   2                              // check if awaited sysex received on midi in
 273   2                              Check_MIDI_Buff_Send_To_Z8_Board(&MIDI_In_From_Con, MIDI_In_From_Con.end_index);
 274   2                      
 275   2                      // bootloader source not yet known or usb in ?
 276   2                      if(fw_bl_src != FW_BL_SRC_MIDI_IN)      
 277   2                      {
 278   3                              // check if awaited sysex received on usb in
 279   3                              if(usb_state_from_ez0_bit)
 280   3                              {
 281   4                                      Check_MIDI_Buff_Send_To_Z8_Board(&MIDI_In_From_Usb, MIDI_In_From_Usb.end_index);
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 30  

 282   4                                      Ep2out_Function();
 283   4                              }
 284   3                      }
 285   2              }
 286   1              while(bootloader_state == current_state);
 287   1      }
 288          
 289          // ***************************************************************************
 290          // Routine      : DecodeFirmwareSysex()
 291          // Input        : 
 292          // Output       : must send ack bool
 293          // Process      : decode the sysex dedicated to firmware
 294          // ***************************************************************************
 295          void DecodeFirmwareSysex(Midi_In_Struct *midi_struct)
 296          {
 297   1              BYTE SYSXID0;
 298   1              WORD Address;
 299   1              BYTE i, j, tmp1, tmp2, tmp3, lenght_div_2;
 300   1              BYTE result = 0;
 301   1              bit must_send_ack = FALSE;
 302   1              BYTE fw_checksum = 0;
 303   1      
 304   1              SYSXID0 = midi_struct->buffer[6];
 305   1      
 306   1              // check the received sysex is dedicated to firmware otherwise return
 307   1              // also check it is a programming sysex : ack request must be set for firmware programming
 308   1              if((SYSXID0 & (FRAME_TO_Z8_TYPE_MSK | acknoledge_sysxid0)) == (/*v1.1 FRAME_IS_FIRMWARE*/FRAME_IS_FIRMWAR
             -E_OR_PURE_MIDI | acknoledge_sysxid0))
 309   1              {
 310   2                      must_send_ack = TRUE;
 311   2      
 312   2                      // must finish firmware upgrade ?
 313   2                      if(SYSXID0 & fw_znext_finish_sysxid0)
 314   2                      {
 315   3                              // bootloader_state = TERMINATE_FW_UPGRADE;
 316   3                              bootloader_state++;
 317   3                              result = acknoledge_sysxid0;
 318   3                              // pass to z8 programming ?
 319   3                              if(SYSXID0 & prog_ez_z8_sysxid0)
 320   3                              {
 321   4                                      must_program_z8 = TRUE;
 322   4                                      // reset crc z8
 323   4                                      // z8_flash_crc = 0;
 324   4                              }
 325   3                      }
 326   2                      else
 327   2                      {
 328   3                              // here we have to program EZ or Z8 firmware data
 329   3                              // extract address from sysex
 330   3                              Address  =  midi_struct->buffer[8]  << 14;
 331   3                              Address += (midi_struct->buffer[9]  << 7);
 332   3                              Address += (midi_struct->buffer[10]);
 333   3      
 334   3                              // un nibble data, decode it, calculate checksum
 335   3                              fw_checksum = 0;
 336   3                              j= FW_SYSX_DATA_START;
 337   3                              for(i=0; i < midi_struct->buffer[7]; i=i+2)
 338   3                              {
 339   4                                      tmp1 = midi_struct->buffer[FW_SYSX_DATA_START+i];
 340   4                                      tmp2 = midi_struct->buffer[FW_SYSX_DATA_START+i+1];
 341   4                                      fw_checksum = (fw_checksum + tmp1) & 0x7F;
 342   4                                      fw_checksum = (fw_checksum + tmp2) & 0x7F;
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 31  

 343   4                                      midi_struct->buffer[j] = ( (tmp1 << 4) + (tmp2 & 0x0F)) ^ 0x55;
 344   4                                      j++;
 345   4                              }
 346   3      
 347   3                              // compare checksum
 348   3                              if(fw_checksum == midi_struct->buffer[FW_SYSX_DATA_START+i])
 349   3                              {
 350   4                                      lenght_div_2 = midi_struct->buffer[7] >> 1;
 351   4                                      
 352   4                                      // NEED TO PROGRAM EZ USB EEPROM ?
 353   4                                      if(!(SYSXID0 & prog_ez_z8_sysxid0))
 354   4                                      {
 355   5                                              if(Address < EE24C64_SIZE)
 356   5                                                      //if(!(LSB(Address) % 32))
 357   5                                                      {
 358   6                                                              EZUSB_IRQ_DISABLE();
 359   6                                                              CKCON |= 0x07; // Set stretch to Non zero when accessing I2C (insert 7 wait states)
 360   6                                                              // write and verify eeprom result=0 if error
 361   6                                                              result = EEPROMWriteVerify(Address, lenght_div_2, &midi_struct->buffer[FW_SYSX_DATA_START]);
 362   6                                                              CKCON &= 0xF8; // Set stretch to 0 after i2c access (required if using paired endpoints : see chip 
             -errata)
 363   6                                                              EZUSB_IRQ_ENABLE();
 364   6                                                      }
 365   5                                      }
 366   4                                      // OR NEED TO PROGRAM Z8 ?
 367   4                                      else
 368   4                                      {
 369   5                                              // calculated checksum is ok to start
 370   5                                              result = acknoledge_sysxid0;            
 371   5      
 372   5                                              // ///////////////// PROGRAM Z8 /////////////////
 373   5                                              // Send write command
 374   5                                              Send_To_Serial_Z8(OCD_WRITE_PRG_MEM_CMD);
 375   5                                              // Send address msb to write
 376   5                                              Send_To_Serial_Z8(Address >> 8);
 377   5                                              // Send address msb to write
 378   5                                              Send_To_Serial_Z8(Address & 0xFF);
 379   5                                              // Send data_lenght msb to write
 380   5                                              Send_To_Serial_Z8(0x00);
 381   5                                              // Send data_lenght lsb to write
 382   5                                              Send_To_Serial_Z8(lenght_div_2);
 383   5                                              // Now send datas
 384   5                                              for(i=0; i < lenght_div_2; i++)
 385   5                                              {
 386   6                                                      Send_To_Serial_Z8(midi_struct->buffer[FW_SYSX_DATA_START+i]);
 387   6                                              }               
 388   5      
 389   5                                              // V1.4 Wait for the transmit buffer being empty (everything sent to Z8)
 390   5                                              while(tx_to_serial_z8_busy);
 391   5      
 392   5                                              // wait raw time write
 393   5                                              EZUSB_Delay(50); // V1.4   10
 394   5      
 395   5                                              // V1.4 ///////////////// READ BACK Z8 AND CHECK IF SAME /////////////////
 396   5                                              // Send write command
 397   5                                              Send_To_Serial_Z8(OCD_READ_PRG_MEM_CMD);
 398   5                                              // Send address msb to write
 399   5                                              Send_To_Serial_Z8(Address >> 8);
 400   5                                              // Send address msb to write
 401   5                                              Send_To_Serial_Z8(Address & 0xFF);
 402   5                                              // Send data_lenght msb to write
 403   5                                              Send_To_Serial_Z8(0x00);
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 32  

 404   5                                              // Send data_lenght lsb to write
 405   5                                              Send_To_Serial_Z8(lenght_div_2);
 406   5      
 407   5                                              // V1.4 Wait for the transmit buffer being empty (everything sent to Z8)
 408   5                                              while(tx_to_serial_z8_busy);
 409   5      
 410   5                                              // V1.4 enable rx1 for reading back datas from z8
 411   5                                              SCON1 |= 0x50;          /* SCON1: mode 1, 8-bit UART, enable rcvr  */
 412   5                                              
 413   5                                              // V1.4 wait for all data being received from Z8
 414   5                                              while(Serial_In_From_Z8.current_index < lenght_div_2);
 415   5      
 416   5      //              EZUSB_Delay(50);
 417   5      //              Send_To_Midi_Out_Con(0xF0);
 418   5      //              Send_To_Midi_Out_Con(lenght_div_2);
 419   5      //              Send_To_Midi_Out_Con(Serial_In_From_Z8.start_index);
 420   5      //              Send_To_Midi_Out_Con(Serial_In_From_Z8.current_index);
 421   5      //              Send_To_Midi_Out_Con(Serial_In_From_Z8.end_index);
 422   5      //              Send_To_Midi_Out_Con(00);
 423   5      //              Send_To_Midi_Out_Con(00);               
 424   5      //              Send_To_Midi_Out_Con(0xF7);
 425   5      
 426   5                                              // V1.4 Now read datas from serial_in_from_z8 input buffer
 427   5                                              for(i=0; i < lenght_div_2; i++)
 428   5                                              {
 429   6                                                      // read data received from serial port buffer
 430   6                                                      tmp3 = Serial_In_From_Z8.buffer[i];
 431   6      
 432   6      //              Send_To_Midi_Out_Con(0xF0);
 433   6      //              Send_To_Midi_Out_Con(midi_struct->buffer[FW_SYSX_DATA_START+i] >> 4);
 434   6      //              Send_To_Midi_Out_Con(midi_struct->buffer[FW_SYSX_DATA_START+i] & 0x0F);
 435   6      //              Send_To_Midi_Out_Con(tmp3 >> 4);
 436   6      //              Send_To_Midi_Out_Con(tmp3 & 0x0F);      
 437   6      //              Send_To_Midi_Out_Con(0xF7);
 438   6                                              
 439   6                                                      // compare data read back with data written
 440   6                                                      if(tmp3 != midi_struct->buffer[FW_SYSX_DATA_START+i])
 441   6                                                      {
 442   7                                                              // a byte doesnt correspond to what was programmed : send ack error
 443   7                                                              result = 0;
 444   7                                                              break;
 445   7                                                      }
 446   6                                              }       
 447   5              
 448   5                                              // V1.4 disable rx1
 449   5                                              SCON1 &= 0xEF;          /* SCON1: mode 1, 8-bit UART, disable rcvr  */
 450   5      
 451   5                                      } // end prog z8
 452   4      
 453   4                                      // 10ms delay after ez or z8 programming
 454   4                                      //EZUSB_Delay(10);                      
 455   4      
 456   4                              } // end checksum ok
 457   3                      } // end program instead of terminate
 458   2              } // end it was a good fw sysex
 459   1      
 460   1              // the whole sysex has now been treated
 461   1              // no circular buffer while upgrading firmware
 462   1      //      midi_struct->start_index        = 0;
 463   1      //      midi_struct->end_index          = 0;
 464   1      //      midi_struct->current_index      = 0;
 465   1              
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 33  

 466   1              // Send acknoledge to host
 467   1              if(must_send_ack)
 468   1                      SendFwAcknoledge(result);       
 469   1      
 470   1      }
 471          
 472          // ***************************************************************************
 473          // Routine      : EEPROMWriteVerify()
 474          // Input        : 
 475          // Output       : None
 476          // Process      : 
 477          // ***************************************************************************
 478          BYTE EEPROMWriteVerify(WORD addr, BYTE length, BYTE xdata *buf)
 479          {
 480   1              BYTE            j;
 481   1              BYTE xdata      ee_str[3];
 482   1              BYTE xdata  data_to_verify;
 483   1              
 484   1              /*
 485   1              buf[0] = MSB(addr);     // address msb
 486   1              buf[1] = LSB(addr);     // address msb
 487   1              // all other datas are already in the buffer
 488   1          EZUSB_WriteI2C(I2C_Addr, length, buf);
 489   1              // now wait write complete
 490   1              //EZUSB_Delay(12);
 491   1              EZUSB_WaitForEEPROMWrite(I2C_Addr);
 492   1              //EZUSB_Delay(2);
 493   1              // re-set eeprom adress since it has been incremented
 494   1              EZUSB_WriteI2C(I2C_Addr, 2, buf);
 495   1      //      EZUSB_WaitForEEPROMWrite(I2C_Addr);
 496   1              // verify written datas 
 497   1              for(j=0;j<length;j++)
 498   1              {
 499   1                      // read back data written
 500   1                      EZUSB_ReadI2C(I2C_Addr, 0x01, &data_to_verify); 
 501   1                      // check if equal to data written before
 502   1                      if(data_to_verify != buf[j+2])
 503   1                              return(0);
 504   1                      //addr++;
 505   1              }
 506   1              // verif ok
 507   1              return(acknoledge_sysxid0);
 508   1      */              
 509   1              for(j=0;j<length;++j)
 510   1              {
 511   2                      ee_str[0] = MSB(addr);  // address msb
 512   2                      ee_str[1] = LSB(addr);  // address lsb
 513   2                      ee_str[2] = buf[j];             // byte to write
 514   2      
 515   2                      EZUSB_WriteI2C(I2C_Addr, 3, ee_str);
 516   2                      // wait 1ms before pooling write finish
 517   2                      //EZUSB_Delay(5);
 518   2                      //Check_Usb();
 519   2                      // now wait write complete
 520   2                      EZUSB_WaitForEEPROMWrite(I2C_Addr);
 521   2                      // wait 1ms before re-reading data              
 522   2                      //EZUSB_Delay(8);
 523   2                      // re-set eeprom adress since it has been incremented
 524   2                      EZUSB_WriteI2C(I2C_Addr, 2, ee_str);
 525   2                      // read back data written
 526   2                      EZUSB_ReadI2C(I2C_Addr, 0x01, &data_to_verify); 
 527   2      
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 34  

 528   2                      // check if equal to data written before
 529   2                      if(data_to_verify != buf[j])
 530   2                              return(0);
 531   2                      addr++;
 532   2              }
 533   1              // verif ok
 534   1              return(acknoledge_sysxid0);
 535   1      
 536   1      }
 537          
 538          // ***************************************************************************
 539          // Routine      : WriteSingleRegOCD()
 540          // Input        : 
 541          // Output       : None
 542          // Process      : 
 543          // ***************************************************************************
 544          void WriteSingleRegOCD(WORD address, BYTE value) 
 545          {
 546   1              Send_To_Serial_Z8(OCD_WRITE_REG_CMD);
 547   1              Send_To_Serial_Z8(address >> 8);
 548   1              Send_To_Serial_Z8(address & 0xFF);
 549   1              Send_To_Serial_Z8(1);
 550   1              Send_To_Serial_Z8(value);
 551   1              EZUSB_Delay(50);
 552   1      }
 553          
 554          // ***************************************************************************
 555          // Routine      : InitFlashFrqAndUnlock()
 556          // Input        : 
 557          // Output       : None
 558          // Process      : 
 559          // ***************************************************************************
 560          void InitFlashFrqAndUnlock(void)
 561          {
 562   1              // rst reg
 563   1              WriteSingleRegOCD(OCD_FLASH_CTR_REG_ADD, OCD_FLASH_CTR_REG_RESET);
 564   1              // Write flash frequency control regs high & low                                        
 565   1              WriteSingleRegOCD(OCD_FLASH_FREQ_REG_HIGH_ADD, OCD_Z8_FLASH_FREQ_REG >> 8);
 566   1              WriteSingleRegOCD(OCD_FLASH_FREQ_REG_LOW_ADD , OCD_Z8_FLASH_FREQ_REG & 0xFF);
 567   1              EZUSB_Delay(50);
 568   1              // unlock flash reg
 569   1              WriteSingleRegOCD(OCD_FLASH_CTR_REG_ADD, OCD_FLASH_FIRST_UNLOCK);
 570   1              WriteSingleRegOCD(OCD_FLASH_CTR_REG_ADD, OCD_FLASH_SECOND_UNLOCK);
 571   1              EZUSB_Delay(50);
 572   1      }
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 35  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com003A (BEGIN)
0000         L?0059:
0000 7410              MOV     A,#010H
0002 2500        R     ADD     A,i
0004         L?0060:
0004 F582              MOV     DPL,A
0006 E4                CLR     A
0007 33                RLC     A
0008 F583              MOV     DPH,A
000A AB00        R     MOV     R3,midi_struct
000C AA00        R     MOV     R2,midi_struct+01H
000E A900        R     MOV     R1,midi_struct+02H
0010 020000      E     LJMP    ?C?CLDOPTR
0013         L?0062:
0013 E500        R     MOV     A,buf+01H
0015 2500        R     ADD     A,j
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3500        R     ADDC    A,buf
001C F583              MOV     DPH,A
001E E0                MOVX    A,@DPTR
001F 22                RET     
0020         L?0065:
0020 2F                ADD     A,R7
0021 F582              MOV     DPL,A
0023 E4                CLR     A
0024 33                RLC     A
0025 F583              MOV     DPH,A
0027 020000      E     LJMP    ?C?CLDOPTR
002A         L?0066:
002A F582              MOV     DPL,A
002C E4                CLR     A
002D 3400        E     ADDC    A,#HIGH Serial_In_From_Z8+05H
002F F583              MOV     DPH,A
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 22                RET     
             ; FUNCTION Com003A (END)

             ; FUNCTION Check_Bootloader (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 120000      E     LCALL   TD_Init
                                           ; SOURCE LINE # 59
0003 D200        E     SETB    z8_board_fully_updated_from_ez0_bit
                                           ; SOURCE LINE # 63
0005 750001      R     MOV     bootloader_state,#01H
                                           ; SOURCE LINE # 66
0008 120000      R     LCALL   SendIdentityBootLoader
                                           ; SOURCE LINE # 68
000B C200        R     CLR     must_program_z8
                                           ; SOURCE LINE # 71
000D 750002      R     MOV     bootloader_state,#02H
                                           ; SOURCE LINE # 73
0010 AF00        R     MOV     R7,bootloader_state
0012 120000      R     LCALL   _WaitNextBootLoaderState
                                           ; SOURCE LINE # 75
0015 300068      R     JNB     must_program_z8,?C0002
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 36  

                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
0018 43B102            ORL     IOE,#02H
                                           ; SOURCE LINE # 80
001B 7FC8              MOV     R7,#0C8H
001D 7E00              MOV     R6,#00H
001F 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 83
0022 75C040            MOV     SCON1,#040H
                                           ; SOURCE LINE # 86
0025 43B101            ORL     IOE,#01H
                                           ; SOURCE LINE # 89
0028 53B1F7            ANL     IOE,#0F7H
                                           ; SOURCE LINE # 92
002B 7FD0              MOV     R7,#0D0H
002D 7E07              MOV     R6,#07H
002F 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 95
0032 43B108            ORL     IOE,#08H
                                           ; SOURCE LINE # 101
0035 7F80              MOV     R7,#080H
0037 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 102
003A 120000      E     LCALL   EZUSB_Delay1ms
                                           ; SOURCE LINE # 105
003D 7F04              MOV     R7,#04H
003F 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 106
0042 7F81              MOV     R7,#081H
0044 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 107
0047 7F64              MOV     R7,#064H
0049 7E00              MOV     R6,#00H
004B 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 109
004E 120000      R     LCALL   InitFlashFrqAndUnlock
                                           ; SOURCE LINE # 112
0051 7FF9              MOV     R7,#0F9H
0053 120000      R     LCALL   L?0063
                                           ; SOURCE LINE # 115
0056 7D63              MOV     R5,#063H
0058 7FF8              MOV     R7,#0F8H
005A 7E0F              MOV     R6,#0FH
005C 120000      R     LCALL   _WriteSingleRegOCD
                                           ; SOURCE LINE # 117
005F 7FA0              MOV     R7,#0A0H
0061 7E0F              MOV     R6,#0FH
0063 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 119
0066 120000      R     LCALL   InitFlashFrqAndUnlock
                                           ; SOURCE LINE # 122
0069 AF00        R     MOV     R7,bootloader_state
006B 120000      R     LCALL   _WaitNextBootLoaderState
                                           ; SOURCE LINE # 124
006E 7F32              MOV     R7,#032H
0070 7E00              MOV     R6,#00H
0072 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 127
0075 7FF8              MOV     R7,#0F8H
0077 120000      R     LCALL   L?0063
                                           ; SOURCE LINE # 130
007A 53B1FE            ANL     IOE,#0FEH
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 37  

                                           ; SOURCE LINE # 133
007D 53B1FD            ANL     IOE,#0FDH
                                           ; SOURCE LINE # 134
0080         ?C0002:
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0080 120000      E     LCALL   Check_Usb
                                           ; SOURCE LINE # 141
0083 120000      E     LCALL   Ep2out_Function
                                           ; SOURCE LINE # 142
0086 80F8              SJMP    ?C0002
                                           ; SOURCE LINE # 143
0088         L?0063:
0088 E4                CLR     A
0089 FD                MOV     R5,A
008A 7E0F              MOV     R6,#0FH
008C 120000      R     LCALL   _WriteSingleRegOCD
008F 22                RET     
             ; FUNCTION Check_Bootloader (END)

             ; FUNCTION SendIdentityBootLoader (BEGIN)
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 157
0000 900000      E     MOV     DPTR,#Serial_In_From_Z8+01H
0003 7416              MOV     A,#016H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0006 120000      R     LCALL   AssignJlabsSysexHeader
                                           ; SOURCE LINE # 162
0009 900000      E     MOV     DPTR,#Serial_In_From_Z8+0BH
000C 7460              MOV     A,#060H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
000F A3                INC     DPTR
0010 740B              MOV     A,#0BH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0013 A3                INC     DPTR
0014 747F              MOV     A,#07FH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0017 E4                CLR     A
0018 A3                INC     DPTR
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
;---- Variable 'i' assigned to Register 'R7' ----
001A FF                MOV     R7,A
001B         ?C0005:
                                           ; SOURCE LINE # 172
001B EF                MOV     A,R7
001C 900000      E     MOV     DPTR,#identity
001F 93                MOVC    A,@A+DPTR
0020 FE                MOV     R6,A
0021 7400        E     MOV     A,#LOW Serial_In_From_Z8+0FH
0023 2F                ADD     A,R7
0024 F582              MOV     DPL,A
0026 E4                CLR     A
0027 3400        E     ADDC    A,#HIGH Serial_In_From_Z8+0FH
0029 F583              MOV     DPH,A
002B EE                MOV     A,R6
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 38  

002C F0                MOVX    @DPTR,A
002D 0F                INC     R7
002E BF0BEA            CJNE    R7,#0BH,?C0005
0031         ?C0006:
                                           ; SOURCE LINE # 174
0031 900000      E     MOV     DPTR,#Serial_In_From_Z8+01AH
0034 74F7              MOV     A,#0F7H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0037 020000      R     LJMP    SendDispatchFwSysex
             ; FUNCTION SendIdentityBootLoader (END)

             ; FUNCTION _SendFwAcknoledge (BEGIN)
                                           ; SOURCE LINE # 185
0000 8F00        R     MOV     result,R7
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 189
0002 900000      E     MOV     DPTR,#Serial_In_From_Z8+01H
0005 7408              MOV     A,#08H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0008 120000      R     LCALL   AssignJlabsSysexHeader
                                           ; SOURCE LINE # 194
000B E500        R     MOV     A,result
000D 4462              ORL     A,#062H
000F 900000      E     MOV     DPTR,#Serial_In_From_Z8+0BH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0013 A3                INC     DPTR
0014 74F7              MOV     A,#0F7H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0017 020000      R     LJMP    SendDispatchFwSysex
             ; FUNCTION _SendFwAcknoledge (END)

             ; FUNCTION AssignJlabsSysexHeader (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 212
0000 900000      E     MOV     DPTR,#Serial_In_From_Z8+05H
0003 74F0              MOV     A,#0F0H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
0006 E4                CLR     A
0007 A3                INC     DPTR
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0009 A3                INC     DPTR
000A 7420              MOV     A,#020H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
000D A3                INC     DPTR
000E 744F              MOV     A,#04FH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0011 E4                CLR     A
0012 A3                INC     DPTR
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0014 A3                INC     DPTR
0015 04                INC     A
0016 F0                MOVX    @DPTR,A
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 39  

                                           ; SOURCE LINE # 218
0017 22                RET     
             ; FUNCTION AssignJlabsSysexHeader (END)

             ; FUNCTION SendDispatchFwSysex (BEGIN)
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
0000 E4                CLR     A
0001 F500        R     MOV     start_index_local,A
                                           ; SOURCE LINE # 232
0003 E500        R     MOV     A,fw_bl_src
0005 6402              XRL     A,#02H
0007 6016              JZ      ?C0011
                                           ; SOURCE LINE # 233
0009         ?C0012:
                                           ; SOURCE LINE # 234
0009 900000      E     MOV     DPTR,#Serial_In_From_Z8+01H
000C E0                MOVX    A,@DPTR
000D 6500        R     XRL     A,start_index_local
000F 600E              JZ      ?C0011
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0011 7400        E     MOV     A,#LOW Serial_In_From_Z8+05H
0013 2500        R     ADD     A,start_index_local
0015 120000      R     LCALL   L?0066
0018 120000      E     LCALL   _Send_To_Midi_Out_Con
                                           ; SOURCE LINE # 237
001B 0500        R     INC     start_index_local
                                           ; SOURCE LINE # 238
001D 80EA              SJMP    ?C0012
                                           ; SOURCE LINE # 239
001F         ?C0011:
                                           ; SOURCE LINE # 242
001F E500        R     MOV     A,fw_bl_src
0021 6401              XRL     A,#01H
0023 6017              JZ      ?C0014
                                           ; SOURCE LINE # 243
0025 300014      E     JNB     usb_state_from_ez0_bit,?C0014
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0028 E4                CLR     A
0029 900000      E     MOV     DPTR,#Serial_In_From_Z8
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
002D 7B01              MOV     R3,#01H
002F 7A00        E     MOV     R2,#HIGH Serial_In_From_Z8
0031 7900        E     MOV     R1,#LOW Serial_In_From_Z8
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 F500        E     MOV     ?_Create_Send_USB_Frame_From_MIDI_Buffer?BYTE+04H,A
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _Create_Send_USB_Frame_From_MIDI_Buffer
                                           ; SOURCE LINE # 248
003C         ?C0014:
                                           ; SOURCE LINE # 251
003C E4                CLR     A
003D 900000      E     MOV     DPTR,#Serial_In_From_Z8
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0041 A3                INC     DPTR
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 40  

0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0043 900000      E     MOV     DPTR,#Serial_In_From_Z8+03H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0047 22                RET     
             ; FUNCTION SendDispatchFwSysex (END)

             ; FUNCTION _WaitNextBootLoaderState (BEGIN)
                                           ; SOURCE LINE # 262
0000 8F00        R     MOV     current_state,R7
                                           ; SOURCE LINE # 263
0002         ?C0019:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0002 120000      E     LCALL   Check_If_Usb_Attached
                                           ; SOURCE LINE # 268
0005 120000      E     LCALL   Check_Usb
                                           ; SOURCE LINE # 271
0008 E500        R     MOV     A,fw_bl_src
000A 6402              XRL     A,#02H
000C 600E              JZ      ?C0020
                                           ; SOURCE LINE # 273
000E 7B01              MOV     R3,#01H
0010 7A00        E     MOV     R2,#HIGH MIDI_In_From_Con
0012 7900        E     MOV     R1,#LOW MIDI_In_From_Con
0014 900000      E     MOV     DPTR,#MIDI_In_From_Con+01H
0017 E0                MOVX    A,@DPTR
0018 FD                MOV     R5,A
0019 120000      E     LCALL   _Check_MIDI_Buff_Send_To_Z8_Board
001C         ?C0020:
                                           ; SOURCE LINE # 276
001C E500        R     MOV     A,fw_bl_src
001E 6401              XRL     A,#01H
0020 6014              JZ      ?C0017
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 279
0022 300011      E     JNB     usb_state_from_ez0_bit,?C0017
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0025 7B01              MOV     R3,#01H
0027 7A00        E     MOV     R2,#HIGH MIDI_In_From_Usb
0029 7900        E     MOV     R1,#LOW MIDI_In_From_Usb
002B 900000      E     MOV     DPTR,#MIDI_In_From_Usb+01H
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 120000      E     LCALL   _Check_MIDI_Buff_Send_To_Z8_Board
                                           ; SOURCE LINE # 282
0033 120000      E     LCALL   Ep2out_Function
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0036         ?C0017:
                                           ; SOURCE LINE # 286
0036 E500        R     MOV     A,bootloader_state
0038 6500        R     XRL     A,current_state
003A 60C6              JZ      ?C0019
                                           ; SOURCE LINE # 287
003C 22                RET     
             ; FUNCTION _WaitNextBootLoaderState (END)

             ; FUNCTION _DecodeFirmwareSysex (BEGIN)
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 41  

                                           ; SOURCE LINE # 295
0000 8B00        R     MOV     midi_struct,R3
0002 8A00        R     MOV     midi_struct+01H,R2
0004 8900        R     MOV     midi_struct+02H,R1
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 300
0006 E4                CLR     A
0007 F500        R     MOV     result,A
                                           ; SOURCE LINE # 301
0009 C200        R     CLR     must_send_ack
                                           ; SOURCE LINE # 302
000B F500        R     MOV     fw_checksum,A
                                           ; SOURCE LINE # 304
000D 90000B            MOV     DPTR,#0BH
0010 120000      E     LCALL   ?C?CLDOPTR
0013 F500        R     MOV     SYSXID0,A
                                           ; SOURCE LINE # 308
0015 5413              ANL     A,#013H
0017 6412              XRL     A,#012H
0019 6003              JZ      $ + 5H
001B 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
001E D200        R     SETB    must_send_ack
                                           ; SOURCE LINE # 313
0020 E500        R     MOV     A,SYSXID0
0022 30E212            JNB     ACC.2,?C0025
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 316
0025 0500        R     INC     bootloader_state
                                           ; SOURCE LINE # 317
0027 750010      R     MOV     result,#010H
                                           ; SOURCE LINE # 319
002A E500        R     MOV     A,SYSXID0
002C 20E503            JB      ACC.5,$ + 6H
002F 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0032 D200        R     SETB    must_program_z8
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0034 020000      R     LJMP    ?C0024
0037         ?C0025:
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 330
0037 90000D            MOV     DPTR,#0DH
003A 120000      E     LCALL   ?C?CLDOPTR
003D 750000      R     MOV     Address+01H,#00H
0040 C4                SWAP    A
0041 33                RLC     A
0042 33                RLC     A
0043 54C0              ANL     A,#0C0H
0045 F500        R     MOV     Address,A
                                           ; SOURCE LINE # 331
0047 90000E            MOV     DPTR,#0EH
004A 120000      E     LCALL   ?C?CLDOPTR
004D 75F080            MOV     B,#080H
0050 A4                MUL     AB
0051 AEF0              MOV     R6,B
0053 2500        R     ADD     A,Address+01H
0055 F500        R     MOV     Address+01H,A
0057 EE                MOV     A,R6
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 42  

0058 3500        R     ADDC    A,Address
005A F500        R     MOV     Address,A
                                           ; SOURCE LINE # 332
005C 90000F            MOV     DPTR,#0FH
005F 120000      E     LCALL   ?C?CLDOPTR
0062 2500        R     ADD     A,Address+01H
0064 F500        R     MOV     Address+01H,A
0066 E4                CLR     A
0067 3500        R     ADDC    A,Address
0069 F500        R     MOV     Address,A
                                           ; SOURCE LINE # 335
006B E4                CLR     A
006C F500        R     MOV     fw_checksum,A
                                           ; SOURCE LINE # 336
006E 75000B      R     MOV     j,#0BH
                                           ; SOURCE LINE # 337
0071 F500        R     MOV     i,A
0073         ?C0028:
0073 AB00        R     MOV     R3,midi_struct
0075 AA00        R     MOV     R2,midi_struct+01H
0077 A900        R     MOV     R1,midi_struct+02H
0079 90000C            MOV     DPTR,#0CH
007C 120000      E     LCALL   ?C?CLDOPTR
007F FF                MOV     R7,A
0080 E500        R     MOV     A,i
0082 C3                CLR     C
0083 9F                SUBB    A,R7
0084 5048              JNC     ?C0029
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0086 AF00        R     MOV     R7,i
0088 7410              MOV     A,#010H
008A 120000      R     LCALL   L?0065
008D F500        R     MOV     tmp1,A
                                           ; SOURCE LINE # 340
008F 7411              MOV     A,#011H
0091 120000      R     LCALL   L?0065
0094 F500        R     MOV     tmp2,A
                                           ; SOURCE LINE # 341
0096 E500        R     MOV     A,fw_checksum
0098 2500        R     ADD     A,tmp1
009A 547F              ANL     A,#07FH
009C F500        R     MOV     fw_checksum,A
                                           ; SOURCE LINE # 342
009E 2500        R     ADD     A,tmp2
00A0 547F              ANL     A,#07FH
00A2 F500        R     MOV     fw_checksum,A
                                           ; SOURCE LINE # 343
00A4 E500        R     MOV     A,tmp1
00A6 C4                SWAP    A
00A7 54F0              ANL     A,#0F0H
00A9 FF                MOV     R7,A
00AA E500        R     MOV     A,tmp2
00AC 540F              ANL     A,#0FH
00AE 2F                ADD     A,R7
00AF 6455              XRL     A,#055H
00B1 FF                MOV     R7,A
00B2 E9                MOV     A,R1
00B3 2405              ADD     A,#05H
00B5 F9                MOV     R1,A
00B6 E4                CLR     A
00B7 3A                ADDC    A,R2
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 43  

00B8 FA                MOV     R2,A
00B9 E500        R     MOV     A,j
00BB 7C00              MOV     R4,#00H
00BD 29                ADD     A,R1
00BE F9                MOV     R1,A
00BF EC                MOV     A,R4
00C0 3A                ADDC    A,R2
00C1 FA                MOV     R2,A
00C2 EF                MOV     A,R7
00C3 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 344
00C6 0500        R     INC     j
                                           ; SOURCE LINE # 345
00C8 0500        R     INC     i
00CA 0500        R     INC     i
00CC 80A5              SJMP    ?C0028
00CE         ?C0029:
                                           ; SOURCE LINE # 348
00CE 120000      R     LCALL   L?0059
00D1 6500        R     XRL     A,fw_checksum
00D3 6003              JZ      $ + 5H
00D5 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
00D8 90000C            MOV     DPTR,#0CH
00DB 120000      E     LCALL   ?C?CLDOPTR
00DE C3                CLR     C
00DF 13                RRC     A
00E0 F500        R     MOV     lenght_div_2,A
                                           ; SOURCE LINE # 353
00E2 E500        R     MOV     A,SYSXID0
00E4 20E52B            JB      ACC.5,?C0032
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
00E7 C3                CLR     C
00E8 E500        R     MOV     A,Address
00EA 9440              SUBB    A,#040H
00EC 4003              JC      $ + 5H
00EE 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
00F1 C2E8              CLR     EUSB
                                           ; SOURCE LINE # 359
00F3 438E07            ORL     CKCON,#07H
                                           ; SOURCE LINE # 361
00F6 E9                MOV     A,R1
00F7 2410              ADD     A,#010H
00F9 F9                MOV     R1,A
00FA E4                CLR     A
00FB 3A                ADDC    A,R2
00FC FA                MOV     R2,A
00FD AB01              MOV     R3,AR1
00FF AD00        R     MOV     R5,lenght_div_2
0101 AF00        R     MOV     R7,Address+01H
0103 AE00        R     MOV     R6,Address
0105 120000      R     LCALL   _EEPROMWriteVerify
0108 8F00        R     MOV     result,R7
                                           ; SOURCE LINE # 362
010A 538EF8            ANL     CKCON,#0F8H
                                           ; SOURCE LINE # 363
010D D2E8              SETB    EUSB
                                           ; SOURCE LINE # 364
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 44  

                                           ; SOURCE LINE # 365
010F 020000      R     LJMP    ?C0024
0112         ?C0032:
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 370
0112 750010      R     MOV     result,#010H
                                           ; SOURCE LINE # 374
0115 7F0A              MOV     R7,#0AH
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
0117 120000      R     LCALL   L?0061
                                           ; SOURCE LINE # 384
011A E4                CLR     A
011B F500        R     MOV     i,A
011D         ?C0035:
011D E500        R     MOV     A,i
011F C3                CLR     C
0120 9500        R     SUBB    A,lenght_div_2
0122 500B              JNC     ?C0038
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
0124 120000      R     LCALL   L?0059
0127 FF                MOV     R7,A
0128 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 387
012B 0500        R     INC     i
012D 80EE              SJMP    ?C0035
012F         ?C0038:
                                           ; SOURCE LINE # 390
012F 2000FD      E     JB      tx_to_serial_z8_busy,?C0038
0132         ?C0039:
                                           ; SOURCE LINE # 393
0132 7F32              MOV     R7,#032H
0134 7E00              MOV     R6,#00H
0136 120000      E     LCALL   _EZUSB_Delay
                                           ; SOURCE LINE # 397
0139 7F0B              MOV     R7,#0BH
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 405
013B 120000      R     LCALL   L?0061
013E         ?C0040:
                                           ; SOURCE LINE # 408
013E 2000FD      E     JB      tx_to_serial_z8_busy,?C0040
0141         ?C0041:
                                           ; SOURCE LINE # 411
0141 43C050            ORL     SCON1,#050H
0144         ?C0042:
                                           ; SOURCE LINE # 414
0144 900000      E     MOV     DPTR,#Serial_In_From_Z8+03H
0147 E0                MOVX    A,@DPTR
0148 C3                CLR     C
0149 9500        R     SUBB    A,lenght_div_2
014B 40F7              JC      ?C0042
014D         ?C0043:
                                           ; SOURCE LINE # 427
014D E4                CLR     A
014E F500        R     MOV     i,A
0150         ?C0044:
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 45  

0150 E500        R     MOV     A,i
0152 C3                CLR     C
0153 9500        R     SUBB    A,lenght_div_2
0155 501C              JNC     ?C0045
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 430
0157 7400        E     MOV     A,#LOW Serial_In_From_Z8+05H
0159 2500        R     ADD     A,i
015B 120000      R     LCALL   L?0066
;---- Variable 'tmp3' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 440
015E E500        R     MOV     A,i
0160 2410              ADD     A,#010H
0162 120000      R     LCALL   L?0060
0165 FE                MOV     R6,A
0166 EF                MOV     A,R7
0167 6E                XRL     A,R6
0168 6005              JZ      ?C0046
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 443
016A E4                CLR     A
016B F500        R     MOV     result,A
                                           ; SOURCE LINE # 444
016D 8004              SJMP    ?C0045
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
016F         ?C0046:
016F 0500        R     INC     i
0171 80DD              SJMP    ?C0044
0173         ?C0045:
                                           ; SOURCE LINE # 449
0173 53C0EF            ANL     SCON1,#0EFH
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0176         ?C0024:
                                           ; SOURCE LINE # 467
0176 300005      R     JNB     must_send_ack,?C0049
                                           ; SOURCE LINE # 468
0179 AF00        R     MOV     R7,result
017B 120000      R     LCALL   _SendFwAcknoledge
                                           ; SOURCE LINE # 470
017E         ?C0049:
017E 22                RET     
017F         L?0061:
017F 120000      E     LCALL   _Send_To_Serial_Z8
0182 E500        R     MOV     A,Address
0184 FF                MOV     R7,A
0185 120000      E     LCALL   _Send_To_Serial_Z8
0188 AF00        R     MOV     R7,Address+01H
018A E500        R     MOV     A,Address+01H
018C 120000      E     LCALL   _Send_To_Serial_Z8
018F E4                CLR     A
0190 FF                MOV     R7,A
0191 120000      E     LCALL   _Send_To_Serial_Z8
0194 AF00        R     MOV     R7,lenght_div_2
0196 120000      E     LCALL   _Send_To_Serial_Z8
0199 22                RET     
             ; FUNCTION _DecodeFirmwareSysex (END)

             ; FUNCTION _EEPROMWriteVerify (BEGIN)
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 46  

                                           ; SOURCE LINE # 478
0000 8E00        R     MOV     addr,R6
0002 8F00        R     MOV     addr+01H,R7
0004 8D00        R     MOV     length,R5
0006 8A00        R     MOV     buf,R2
0008 8B00        R     MOV     buf+01H,R3
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 509
000A E4                CLR     A
000B F500        R     MOV     j,A
000D         ?C0050:
000D E500        R     MOV     A,j
000F C3                CLR     C
0010 9500        R     SUBB    A,length
0012 5045              JNC     ?C0051
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0014 E500        R     MOV     A,addr
0016 900000      R     MOV     DPTR,#ee_str
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
001A E500        R     MOV     A,addr+01H
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
001E 120000      R     LCALL   L?0062
0021 900000      R     MOV     DPTR,#ee_str+02H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0025 7D03              MOV     R5,#03H
0027 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 520
002A 7F51              MOV     R7,#051H
002C 120000      E     LCALL   _EZUSB_WaitForEEPROMWrite
                                           ; SOURCE LINE # 524
002F 7D02              MOV     R5,#02H
0031 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 526
0034 7A00        R     MOV     R2,#HIGH data_to_verify
0036 7B00        R     MOV     R3,#LOW data_to_verify
0038 7D01              MOV     R5,#01H
003A 7F51              MOV     R7,#051H
003C 120000      E     LCALL   _EZUSB_ReadI2C
                                           ; SOURCE LINE # 529
003F 120000      R     LCALL   L?0062
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#data_to_verify
0046 E0                MOVX    A,@DPTR
0047 6F                XRL     A,R7
0048 6003              JZ      ?C0053
                                           ; SOURCE LINE # 530
004A 7F00              MOV     R7,#00H
004C 22                RET     
004D         ?C0053:
                                           ; SOURCE LINE # 531
004D 0500        R     INC     addr+01H
004F E500        R     MOV     A,addr+01H
0051 7002              JNZ     ?C0057
0053 0500        R     INC     addr
0055         ?C0057:
                                           ; SOURCE LINE # 532
0055 0500        R     INC     j
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 47  

0057 80B4              SJMP    ?C0050
0059         ?C0051:
                                           ; SOURCE LINE # 534
0059 7F10              MOV     R7,#010H
                                           ; SOURCE LINE # 536
005B         ?C0054:
005B 22                RET     
005C         L?0067:
005C 7A00        R     MOV     R2,#HIGH ee_str
005E 7B00        R     MOV     R3,#LOW ee_str
0060 7F51              MOV     R7,#051H
0062 120000      E     LCALL   _EZUSB_WriteI2C
0065 22                RET     
             ; FUNCTION _EEPROMWriteVerify (END)

             ; FUNCTION _WriteSingleRegOCD (BEGIN)
                                           ; SOURCE LINE # 544
0000 8E00        R     MOV     address,R6
0002 8F00        R     MOV     address+01H,R7
0004 8D00        R     MOV     value,R5
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
0006 7F08              MOV     R7,#08H
0008 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 547
000B E500        R     MOV     A,address
000D FF                MOV     R7,A
000E 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 548
0011 AF00        R     MOV     R7,address+01H
0013 E500        R     MOV     A,address+01H
0015 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 549
0018 7F01              MOV     R7,#01H
001A 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 550
001D AF00        R     MOV     R7,value
001F 120000      E     LCALL   _Send_To_Serial_Z8
                                           ; SOURCE LINE # 551
0022 7F32              MOV     R7,#032H
0024 7E00              MOV     R6,#00H
0026 020000      E     LJMP    _EZUSB_Delay
             ; FUNCTION _WriteSingleRegOCD (END)

             ; FUNCTION InitFlashFrqAndUnlock (BEGIN)
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 563
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 120000      R     LCALL   L?0064
                                           ; SOURCE LINE # 565
0005 7D4E              MOV     R5,#04EH
0007 7FFA              MOV     R7,#0FAH
0009 7E0F              MOV     R6,#0FH
000B 120000      R     LCALL   _WriteSingleRegOCD
                                           ; SOURCE LINE # 566
000E 7D20              MOV     R5,#020H
0010 7FFB              MOV     R7,#0FBH
                                           ; SOURCE LINE # 567
0012 120000      R     LCALL   L?0068
0015 120000      E     LCALL   _EZUSB_Delay
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 48  

                                           ; SOURCE LINE # 569
0018 7D73              MOV     R5,#073H
001A 120000      R     LCALL   L?0064
                                           ; SOURCE LINE # 570
001D 7D8C              MOV     R5,#08CH
001F 7FF8              MOV     R7,#0F8H
                                           ; SOURCE LINE # 571
0021 120000      R     LCALL   L?0068
0024 020000      E     LJMP    _EZUSB_Delay
                                           ; SOURCE LINE # 572
0027         L?0064:
0027 7FF8              MOV     R7,#0F8H
0029 7E0F              MOV     R6,#0FH
002B 120000      R     LCALL   _WriteSingleRegOCD
002E 22                RET     
002F         L?0068:
002F 7E0F              MOV     R6,#0FH
0031 120000      R     LCALL   _WriteSingleRegOCD
0034 7F32              MOV     R7,#032H
0036 7E00              MOV     R6,#00H
0038 22                RET     
             ; FUNCTION InitFlashFrqAndUnlock (END)

C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 49  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


WAIT_SOF . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Check_If_Usb_Attached. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
Midi_In_Struct . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  133
  start_index. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  end_index. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  merger_state . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  current_index. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  input_status . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  buffer . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  128
STRINGDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
_EZUSB_ReadI2C . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DecodeFirmwareSysex . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  midi_struct. . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  SYSXID0. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  Address. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  tmp1 . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0008H  1
  tmp2 . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0009H  1
  tmp3 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  lenght_div_2 . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000AH  1
  result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000BH  1
  must_send_ack. . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  fw_checksum. . . . . . . . . . . . .  AUTO     DATA   U_CHAR   000CH  1
LCD_MESSAGE_TO_Z8_INDEX. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TD_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WaitNextBootLoaderState . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  current_state. . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_Send_To_Midi_Out_Con. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IN_SYSEX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uchar. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
DEVICEQUALDSCR . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  spec_ver_minor . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  spec_ver_major . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dev_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  max_packet . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  configs. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved0. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
TERMINATE_FW_UPGRADE . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Z8_STATUS_0_NVM_INDEX. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Z8_STATUS_1_NVM_INDEX. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_BL_SRC_USB_IN . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_EZUSB_WriteI2C. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SendFwAcknoledge. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  result . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
Midi_In_Realtime_Struct. . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  realtime . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
  realtime_start_index . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  realtime_end_index . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  input_status . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 50  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SendDispatchFwSysex. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start_index_local. . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
WAIT_Z8_FW_DATA. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
z8_board_fully_updated_from_ez0_bit. .  EXTERN   DATA   BIT      -----  1
BOOTLOADER_OFF . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DSCR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  DATA   BIT      -----  1
INT_TEMPO_INDEX. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FRAME_IS_MIDI_CTRL_ASSIGN. . . . . . .  E_CONST  -----  U_CHAR   -----  1
WAIT_EZ_FW_DATA. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CTRL_REG_0_7BITS_TO_EZ_INDEX . . . . .  E_CONST  -----  U_CHAR   -----  1
EUSB . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
CTRL_REG_1_7BITS_TO_EZ_INDEX . . . . .  E_CONST  -----  U_CHAR   -----  1
_EEPROMWriteVerify . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  length . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  2
  j. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  ee_str . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  3
  data_to_verify . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
MIDI_In_From_Con . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  133
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
LAST_CTRL_REG_7BITS_TO_EZ_INDEX. . . .  E_CONST  -----  U_CHAR   -----  1
fw_bl_src. . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
bootloader_state . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0001H  1
InitFlashFrqAndUnlock. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FIFO_FULL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
must_program_z8. . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
_EZUSB_Delay . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
MIDI_In_From_Usb . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  133
CN0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SERIAL . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CN1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
AssignJlabsSysexHeader . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Send_To_Serial_Z8 . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SYSEX_RECEIVED . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FRAME_STATUS_BYTE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NORMAL . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_WriteSingleRegOCD . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  address. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  value. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
tx_to_serial_z8_busy . . . . . . . . .  EXTERN   DATA   BIT      -----  1
SendIdentityBootLoader . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CTRL_REG_0_7B_FROM_EZ_INDEX. . . . . .  E_CONST  -----  U_CHAR   -----  1
FRAME_IS_FIRMWARE_OR_PURE_MIDI . . . .  E_CONST  -----  U_CHAR   -----  1
FW_BL_SRC_MIDI_IN. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Check_Bootloader . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CHANNEL_INDEX. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FRAME_IS_LCD_CTRL_ASSIGN . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IOE. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
DEVICEDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  18
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 51  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  spec_ver_minor . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  spec_ver_major . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dev_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  max_packet . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  vendor_id. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  product_id . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  version_id . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  mfg_str. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  prod_str . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  serialnum_str. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  configs. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
Serial_In_From_Z8. . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  133
SCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
_EZUSB_WaitForEEPROMWrite. . . . . . .  EXTERN   CODE   PROC     -----  -----
CONFIGDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  config_len . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  interfaces . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  index. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  config_str . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  power. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
FW_BL_SRC_UNKNOWN. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GROUP_INDEX. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FRAME_IS_COMMON_PARAM. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
USB. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Check_Usb. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Ep2out_Function. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
identity . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
WAIT_FOR_CORRECT_DATA. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EZUSB_Delay1ms . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WAIT_EOF . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EPIOC. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  cntrl. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bytes. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
I2CPCKT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
INTRFCDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  alt_setting. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ep_cnt . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  class. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  interface_str. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
_Create_Send_USB_Frame_From_MIDI_Buffer EXTERN   CODE   PROC     -----  -----
SEND_IDENTITY_SYSEX. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.02   BOOTLOADER                                                            02/19/2007 12:06:38 PAGE 52  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


usb_state_from_ez0_bit . . . . . . . .  EXTERN   DATA   BIT      -----  1
ENDPNTDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  ep_type. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  mp_L . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  mp_H . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  interval . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
_Check_MIDI_Buff_Send_To_Z8_Board. . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1047    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
